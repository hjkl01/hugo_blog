<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>我的笔记 on My Note Site</title>
    <link>https://hjkl01.github.io/</link>
    <description>Recent content in 我的笔记 on My Note Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language><atom:link href="https://hjkl01.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>adb</title>
      <link>https://hjkl01.github.io/linux/adb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/adb/</guid>
      <description># adb commands adb devices #查看连接设备 adb start-server 启动adb 服务，基本不会用到，因为只要设备连接正确，会自动启动adb server adb kill-server 停止adb server adb -s cf27456f shell # 指定连接设备使用命令 adb install test.apk # 安装应用 adb install -r demo.apk #安装apk 到sd 卡： adb uninstall cn.com.test.mobile #卸载应用，需要指定包 adb uninstall -k cn.com.test.mobile #卸载app 但保留数据和缓存文件 adb shell pm list packages #列出手机装的所有app 的包名 adb shell pm list packages -s 列出系统应用的所有包名 adb shell pm list packages -3 #列出除了系统应用的第三方应用包名 adb shell pm clear cn.com.test.mobile #清除应用数据与缓存 adb shell am start -ncn.</description>
    </item>
    
    <item>
      <title>API tool: httpbin &amp;&amp; hoppscotch</title>
      <link>https://hjkl01.github.io/docker/hoppscotch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/hoppscotch/</guid>
      <description>docker run -p 80:80 kennethreitz/httpbin http://127.0.0.1/get?show_env=1 docker run --rm --name hoppscotch -p 3000:3000 hoppscotch/hoppscotch:latest </description>
    </item>
    
    <item>
      <title>arch</title>
      <link>https://hjkl01.github.io/linux/arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/arch/</guid>
      <description>wiki link: https://gitlab.com/drizzt/vps2arch/-/wikis/Tested-VPS-Providers
⚠️ 设置root的密码 wget https://tinyurl.com/vps2arch 也会被重定向到以下 url wget https://gitlab.com/drizzt/vps2arch/-/raw/master/vps2arch 启动脚本 sh ./vps2arch # 当你从脚本默认的源下载速度较慢的时候，可以使用 -m 参数指定源，例如 sudo sh ./vps2arch -m https://mirrors.neusoft.edu.cn/archlinux/ sync ; reboot -f 源设置 /etc/pacman.d/mirrorlist # 清华大学 Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch # 南京大学 Server = https://mirror.nju.edu.cn/archlinux/$repo/os/$arch # or sudo pacman-mirrors -i -c China sudo pacman -Syy yay pacman -S --needed git base-devel git clone https://aur.archlinux.org/yay-bin.git cd yay-bin makepkg -si 使用 ntp pacman -S ntp timedatectl set-ntp true # 设置时区 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc utf8 编辑 /etc/locale.</description>
    </item>
    
    <item>
      <title>arch pppoe</title>
      <link>https://hjkl01.github.io/linux/arch-pppoe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/arch-pppoe/</guid>
      <description>pppoe 拨号 yay -S --noconfirm rp-pppoe ifconfig # 查看对应的网卡 sudo ifconfig 网卡 down # 停止网卡服务 sudo pppoe-setup # 输入对应的用户名密码等信息 sudo pppoe-start sudo route delete default sudo route add default ppp0 # ppp0可能是其他名字 ifconfig查看 sudo nvim /etc/resolvconf.conf # 更新name_servers sudo resolvconf -u # 更新DNS </description>
    </item>
    
    <item>
      <title>aria2 &amp;&amp; jellyfin or embyserver </title>
      <link>https://hjkl01.github.io/docker/emby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/emby/</guid>
      <description>version: &amp;#34;3.8&amp;#34; services: Aria2-Pro: container_name: aria2-pro image: p3terx/aria2-pro environment: - PUID=65534 - PGID=65534 - UMASK_SET=022 - RPC_SECRET=update_me - RPC_PORT=6800 - LISTEN_PORT=6888 - DISK_CACHE=64M - IPV6_MODE=true - UPDATE_TRACKERS=true - CUSTOM_TRACKER_URL= - TZ=Asia/Shanghai volumes: - ${PWD}/data/aria2-config:/config # - ${PWD}/data/embyserver/movies:/downloads - ${PWD}/data/jellyfin/movies:/downloads ports: - 6800:6800 - 6888:6888 - 6888:6888/udp restart: unless-stopped logging: driver: json-file options: max-size: 1m AriaNg: container_name: ariang image: p3terx/ariang command: --port 6880 --ipv6 ports: - 192.168.50.4:6880:6880 restart: unless-stopped logging: driver: json-file options: max-size: 1m version: &amp;#34;2.</description>
    </item>
    
    <item>
      <title>asdf</title>
      <link>https://hjkl01.github.io/linux/asdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/asdf/</guid>
      <description>install asdf git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.0 # add following to ~/.zshrc . $HOME/.asdf/asdf.sh install plugin asdf plugin add nodejs asdf list all nodejs asdf install nodejs lts # asdf install nodejs latest asdf list nodejs asdf global nodejs lts </description>
    </item>
    
    <item>
      <title>celery</title>
      <link>https://hjkl01.github.io/python/celery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/celery/</guid>
      <description>celery 用法 # test.py import time from datetime import datetime from celery import Celery # result_address = &amp;#39;elasticsearch://user:passwd@ip:port/index&amp;#39; broker = &amp;#39;redis://:passwd@ip:port/db&amp;#39; result_address = &amp;#34;mongodb://user:password@ip:port/db&amp;#34; app = Celery(&amp;#34;tasks&amp;#34;, broker=broker, backend=result_address) def my_on_failure(exc, task_id, args, kwargs, einfo): print(&amp;#34;task failed&amp;#34;) for argv in [exc, task_id, args, kwargs, einfo]: print(argv) app.conf.update( task_serializer=&amp;#34;json&amp;#34;, accept_content=[&amp;#34;json&amp;#34;], # Ignore other content result_serializer=&amp;#34;json&amp;#34;, timezone=&amp;#34;Asia/Shanghai&amp;#34;, enable_utc=True, # 下面这个就是限制tasks模块下的add函数，每秒钟只能执行10次 # CELERY_ANNOTATIONS = {&amp;#39;tasks.add&amp;#39;:{&amp;#39;rate_limit&amp;#39;:&amp;#39;10/s&amp;#39;}} # 或者限制所有的任务的刷新频率 task_annotations={&amp;#34;tasks.add&amp;#34;: {&amp;#34;rate_limit&amp;#34;: &amp;#34;2/m&amp;#34;}}, # annotations={&amp;#34;tasks.add&amp;#34;: {&amp;#34;rate_limit&amp;#34;: &amp;#34;5/m&amp;#34;, &amp;#34;on_failure&amp;#34;: my_on_failure}}, # annotations={&amp;#34;*&amp;#34;: {&amp;#34;rate_limit&amp;#34;: &amp;#34;10/s&amp;#34;, &amp;#34;on_failure&amp;#34;: my_on_failure}}, # celery worker的并发数，默认是服务器的内核数目,也是命令行-c参数指定的数目 worker_concurrency=10, # celery worker 每次去BROKER中预取任务的数量 prefetch_multiplier=1, # 单个任务的运行时间限制，否则会被杀死 task_time_limit=60, # 压缩方案选择，可以是zlib, bzip2，默认是发送没有压缩的数据 message_compression=&amp;#34;zlib&amp;#34;, ) @app.</description>
    </item>
    
    <item>
      <title>chrome</title>
      <link>https://hjkl01.github.io/linux/chrome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/chrome/</guid>
      <description>web scraper https://chrome.google.com/webstore/detail/web-scraper-free-web-scra/jnhgnonknehpejjnehehllkliplmbmhn {&amp;#34;_id&amp;#34;:&amp;#34;test&amp;#34;,&amp;#34;startUrl&amp;#34;:[&amp;#34;https://list.jd.com/list.html?cat=9987,653,655&amp;#34;,&amp;#34;https://list.jd.com/list.html?cat=9987,653,655&amp;amp;page=2&amp;amp;s=58&amp;amp;click=0&amp;#34;],&amp;#34;selectors&amp;#34;:[{&amp;#34;delay&amp;#34;:0,&amp;#34;id&amp;#34;:&amp;#34;name&amp;#34;,&amp;#34;multiple&amp;#34;:true,&amp;#34;parentSelectors&amp;#34;:[&amp;#34;_root&amp;#34;],&amp;#34;selector&amp;#34;:&amp;#34;#J_goodsList &amp;gt; ul &amp;gt; li&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;SelectorElement&amp;#34;},{&amp;#34;delay&amp;#34;:0,&amp;#34;id&amp;#34;:&amp;#34;sku_name&amp;#34;,&amp;#34;multiple&amp;#34;:false,&amp;#34;parentSelectors&amp;#34;:[&amp;#34;name&amp;#34;],&amp;#34;regex&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;selector&amp;#34;:&amp;#34;a em&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;SelectorText&amp;#34;},{&amp;#34;delay&amp;#34;:0,&amp;#34;id&amp;#34;:&amp;#34;price&amp;#34;,&amp;#34;multiple&amp;#34;:false,&amp;#34;parentSelectors&amp;#34;:[&amp;#34;name&amp;#34;],&amp;#34;regex&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;selector&amp;#34;:&amp;#34; div &amp;gt; div.p-price &amp;gt; strong &amp;gt; i&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;SelectorText&amp;#34;},{&amp;#34;delay&amp;#34;:0,&amp;#34;id&amp;#34;:&amp;#34;comments&amp;#34;,&amp;#34;multiple&amp;#34;:false,&amp;#34;parentSelectors&amp;#34;:[&amp;#34;name&amp;#34;],&amp;#34;regex&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;selector&amp;#34;:&amp;#34;.p-commit strong a&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;SelectorText&amp;#34;},{&amp;#34;delay&amp;#34;:0,&amp;#34;id&amp;#34;:&amp;#34;shop&amp;#34;,&amp;#34;multiple&amp;#34;:false,&amp;#34;parentSelectors&amp;#34;:[&amp;#34;name&amp;#34;],&amp;#34;regex&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;selector&amp;#34;:&amp;#34;.p-shop span a&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;SelectorText&amp;#34;}]} {&amp;#34;_id&amp;#34;:&amp;#34;tianmao&amp;#34;,&amp;#34;startUrl&amp;#34;:[&amp;#34;https://list.tmall.com/search_product.htm?spm=a220m.1000858.0.0.219b2a680geXJ0&amp;amp;s=120&amp;amp;q=%CA%D6%BB%FA&amp;amp;sort=s&amp;amp;style=g&amp;amp;from=mallfp..pc_1_searchbutton&amp;amp;active=1&amp;amp;type=pc#J_Filter&amp;#34;],&amp;#34;selectors&amp;#34;:[{&amp;#34;delay&amp;#34;:0,&amp;#34;id&amp;#34;:&amp;#34;sku&amp;#34;,&amp;#34;multiple&amp;#34;:true,&amp;#34;parentSelectors&amp;#34;:[&amp;#34;_root&amp;#34;],&amp;#34;selector&amp;#34;:&amp;#34;#J_ItemList .product&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;SelectorElement&amp;#34;},{&amp;#34;delay&amp;#34;:0,&amp;#34;id&amp;#34;:&amp;#34;name&amp;#34;,&amp;#34;multiple&amp;#34;:false,&amp;#34;parentSelectors&amp;#34;:[&amp;#34;sku&amp;#34;],&amp;#34;regex&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;selector&amp;#34;:&amp;#34;.productTitle a&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;SelectorText&amp;#34;},{&amp;#34;delay&amp;#34;:0,&amp;#34;id&amp;#34;:&amp;#34;price&amp;#34;,&amp;#34;multiple&amp;#34;:false,&amp;#34;parentSelectors&amp;#34;:[&amp;#34;sku&amp;#34;],&amp;#34;regex&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;selector&amp;#34;:&amp;#34;.productPrice em&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;SelectorText&amp;#34;},{&amp;#34;delay&amp;#34;:0,&amp;#34;id&amp;#34;:&amp;#34;shop&amp;#34;,&amp;#34;multiple&amp;#34;:false,&amp;#34;parentSelectors&amp;#34;:[&amp;#34;sku&amp;#34;],&amp;#34;regex&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;selector&amp;#34;:&amp;#34;a.productShop-name&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;SelectorText&amp;#34;},{&amp;#34;delay&amp;#34;:0,&amp;#34;id&amp;#34;:&amp;#34;sales&amp;#34;,&amp;#34;multiple&amp;#34;:false,&amp;#34;parentSelectors&amp;#34;:[&amp;#34;sku&amp;#34;],&amp;#34;regex&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;selector&amp;#34;:&amp;#34;span em&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;SelectorText&amp;#34;},{&amp;#34;delay&amp;#34;:0,&amp;#34;id&amp;#34;:&amp;#34;comments&amp;#34;,&amp;#34;multiple&amp;#34;:false,&amp;#34;parentSelectors&amp;#34;:[&amp;#34;sku&amp;#34;],&amp;#34;regex&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;selector&amp;#34;:&amp;#34;span a[data-p]&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;SelectorText&amp;#34;}]} chrome devtools var result = $x(&amp;#39;xpath&amp;#39;).map(function(i){return i.textContent} ); copy(result); </description>
    </item>
    
    <item>
      <title>database</title>
      <link>https://hjkl01.github.io/python/databases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/databases/</guid>
      <description>sqlalchemy # pip install psycopg2-binary # sqlacodegen postgres://user:passwd@host:ip/database --outfile model.py from sqlalchemy import create_engine from sqlalchemy import Column, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker db_string = &amp;#34;postgres://admin:donotusethispassword@aws-us-east-1-portal.19.dblayer.com:15813/compose&amp;#34; db = create_engine(db_string) base = declarative_base() class Film(base): __tablename__ = &amp;#34;films&amp;#34; title = Column(String, primary_key=True) director = Column(String) year = Column(String) Session = sessionmaker(db) session = Session() base.metadata.create_all(db) # Create doctor_strange = Film(title=&amp;#34;Doctor Strange&amp;#34;, director=&amp;#34;Scott Derrickson&amp;#34;, year=&amp;#34;2016&amp;#34;) session.add(doctor_strange) session.commit() # Read films = session.</description>
    </item>
    
    <item>
      <title>ddns</title>
      <link>https://hjkl01.github.io/docker/ddns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/ddns/</guid>
      <description>version: &amp;#39;3.1&amp;#39; services: ddns_go: image: jeessy/ddns-go restart: unless-stopped network_mode: &amp;#34;host&amp;#34; volumes: - ./data/ddns:/root # port: 9876 ddns: image: sanjusss/aliyun-ddns restart: always network_mode: &amp;#34;host&amp;#34; environment: # https://usercenter.console.aliyun.com/ AKID: AKSCT: DOMAIN: REDO: 30 TTL: 600 TIMEZONE: 8.0 TYPE: A,AAAA </description>
    </item>
    
    <item>
      <title>django</title>
      <link>https://hjkl01.github.io/python/django/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/django/</guid>
      <description>import os import django from proxyip.models import ProxyIP os.environ[&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;] = &amp;#39;dj_project.settings&amp;#39; django.setup() p = ProxyIP(ip=&amp;#39;192.168.50.1&amp;#39;) p.save() print(ProxyIP.objects.all()) python manage.py shell &amp;lt; main.py python manage.py dumpdata (myapp) &amp;gt; myapp.json python manage.py loaddata myapp.json </description>
    </item>
    
    <item>
      <title>fastapi</title>
      <link>https://hjkl01.github.io/python/fastapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/fastapi/</guid>
      <description>from fastapi import FastAPI from pydantic import BaseModel app = FastAPI() # @app.get(&amp;#34;/&amp;#34;) async def read_root(): return {&amp;#34;Hello&amp;#34;: &amp;#34;World&amp;#34;} # @app.get(&amp;#34;/items/{item_id}&amp;#34;) async def read_item(item_id: int, q: str = None): return {&amp;#34;item_id&amp;#34;: item_id, &amp;#34;q&amp;#34;: q} class Item(BaseModel): name: str description: str = None price: float tax: float = None # @app.post(&amp;#34;/items/&amp;#34;) async def create_item(item: Item): return item app.add_api_route(&amp;#34;/&amp;#34;, read_root) app.add_api_route(&amp;#34;/item/{item_id}&amp;#34;, read_item) app.add_api_route(&amp;#34;/items/&amp;#34;, create_item, methods=[&amp;#39;POST&amp;#39;]) if __name__ == &amp;#39;__main__&amp;#39;: uvicorn.run(&amp;#39;main:app&amp;#39;, reload=True) # gunicorn test:app -w 4 -k uvicorn.</description>
    </item>
    
    <item>
      <title>git &amp;&amp; ssh</title>
      <link>https://hjkl01.github.io/linux/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/git/</guid>
      <description>git config # generate public key git config --global user.name &amp;#34;&amp;#34; git config --global user.email &amp;#34;&amp;#34; ssh-keygen -t rsa -b 4096 -C &amp;#34;&amp;#34; # git config git config --global http.https://github.com.proxy socks5://127.0.0.1:1080 git config --global https.https://github.com.proxy socks5://127.0.0.1:1080 # or vi ~/.gitconfig [http &amp;#34;https://github.com&amp;#34;] proxy = socks5://127.0.0.1:1080 postBuffer = 524288000 [https &amp;#34;https://github.com&amp;#34;] proxy = socks5://127.0.0.1:1080 postBuffer = 524288000 # git submodule git submodule add https://github.com/liuyib/hexo-theme-stun/ themes/stun git submodule update --remote ssh config # $HOME/.</description>
    </item>
    
    <item>
      <title>gitea</title>
      <link>https://hjkl01.github.io/docker/gitea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/gitea/</guid>
      <description># web管理界面里 默认端口3000和22不要改 # example: ssh://git@git.hjkl01.cn:58001/user/project.git version: &amp;#34;3&amp;#34; networks: gitea: external: false services: server: image: gitea/gitea:1.15.4 container_name: gitea environment: - USER_UID=1000 - USER_GID=1000 - DB_TYPE=postgres - DB_HOST=db:5432 - DB_NAME=gitea - DB_USER=username - DB_PASSWD=password restart: always networks: - gitea volumes: - ./data/gitea/data:/data ports: - &amp;#34;58000:3000&amp;#34; - &amp;#34;58001:22&amp;#34; depends_on: - db db: image: postgres:13-alpine restart: always environment: - POSTGRES_USER=username - POSTGRES_PASSWORD=password - POSTGRES_DB=gitea networks: - gitea volumes: - ./data/gitea/postgres:/var/lib/postgresql/data </description>
    </item>
    
    <item>
      <title>gops</title>
      <link>https://hjkl01.github.io/docker/gops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/gops/</guid>
      <description>version: &amp;#39;3&amp;#39; services: db: image: postgres:11-alpine restart: unless-stopped environment: POSTGRES_USER: &amp;#39;gogs&amp;#39; POSTGRES_PASSWORD: &amp;#39;gogs&amp;#39; POSTGRES_DB: &amp;#39;postgres&amp;#39; ports: - &amp;#34;5432:5432&amp;#34; networks: - gogs_net volumes: - ./data/postgres_data:/var/lib/postgresql/data gogs: image: gogs/gogs:latest networks: - gogs_net depends_on: - db links: - db ports: - &amp;#34;10022:22&amp;#34; - &amp;#34;10080:3000&amp;#34; restart: unless-stopped volumes: - ./data/gogs_data:/data:rw networks: gogs_net: driver: bridge </description>
    </item>
    
    <item>
      <title>httpbin</title>
      <link>https://hjkl01.github.io/docker/httpbin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/httpbin/</guid>
      <description>docker run -p 80:80 kennethreitz/httpbin http://127.0.0.1/get?show_env=1 </description>
    </item>
    
    <item>
      <title>jupyter</title>
      <link>https://hjkl01.github.io/python/jupyter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/jupyter/</guid>
      <description># jupyter config pip install jupyter jupyter notebook --generate-config # ipython from notebook.auth import passwd passwd() # or jupyter notebook password vim ~/.jupyter/jupyter_notebook_config.py c.NotebookApp.ip=&amp;#39;*&amp;#39; c.NotebookApp.password = u&amp;#39;&amp;#39; c.NotebookApp.open_browser = False c.NotebookApp.port = 8000 jupyter notebook import os import re import secrets import yaml from rich import print class ConfigMeta: def __init__(self, _file=&amp;#34;config.yaml&amp;#34;): self.file = _file def __getattr__(self, key): with open(self.file, &amp;#34;r&amp;#34;) as file: self.con = yaml.safe_load(file) result = self.con.get(key) return result Config = ConfigMeta() def generate_password(): result = [] for i in range(1, 9): temp = {} temp[&amp;#34;port&amp;#34;] = 9120 + i temp[&amp;#34;dirname&amp;#34;] = f&amp;#34;njrd_venv_{9120+i}&amp;#34; temp[&amp;#34;password&amp;#34;] = secrets.</description>
    </item>
    
    <item>
      <title>mitmproxy</title>
      <link>https://hjkl01.github.io/python/mitmproxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/mitmproxy/</guid>
      <description># install pip install mitmproxy # open mitm.it after set proxy mitmproxy --http2 --listen-host 0.0.0.0 --listen-port 8888 -s mitm_test.py # http.HTTPFlow 实例 flow flow.request.headers #获取所有头信息，包含Host、User-Agent、Content-type等字段 flow.request.url #完整的请求地址，包含域名及请求参数，但是不包含放在body里面的请求参数 flow.request.pretty_url #同flow.request.url目前没看出什么差别 flow.request.host #域名 flow.request.method #请求方式。POST、GET等 flow.request.scheme #什么请求 ，如https flow.request.path # 请求的路径，url除域名之外的内容 flow.request.get_text() #请求中body内容，有一些http会把请求参数放在body里面，那么可通过此方法获取，返回字典类型 flow.request.query #返回MultiDictView类型的数据，url直接带的键值参数 flow.request.get_content()#bytes,结果如flow.request.get_text() flow.request.raw_content #bytes,结果如flow.request.get_content() flow.request.urlencoded_form #MultiDictView，content-type：application/x-www-form-urlencoded时的请求参数，不包含url直接带的键值参数 flow.request.multipart_form #MultiDictView，content-type：multipart/form-data 时的请求参数，不包含url直接带的键值参数 以上均为获取request信息的一些常用方法，对于response，同理 flow.response.status_code #状态码 flow.response.text#返回内容，已解码 flow.response.content #返回内容，二进制 flow.response.setText()#修改返回内容，不需要转码 # example def response(flow): if &amp;#34;some url&amp;#34; in flow.request.url: print(&amp;#34;[*] Request: {}&amp;#34;.format(flow.request.url)) print(&amp;#34;[*] Response: {}&amp;#34;.</description>
    </item>
    
    <item>
      <title>mongo</title>
      <link>https://hjkl01.github.io/python/mongo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/mongo/</guid>
      <description># MongoDB 语法 db.users.find({ create_at: { $exists: true } }) db.users.find() select * from users db.users.find({&amp;#34;age&amp;#34; : 27}) select * from users where age = 27 db.users.find({&amp;#34;username&amp;#34; : &amp;#34;joe&amp;#34;, &amp;#34;age&amp;#34; : 27}) select * from users where &amp;#34;username&amp;#34; = &amp;#34;joe&amp;#34; and age = 27 db.users.find({}, {&amp;#34;username&amp;#34; : 1, &amp;#34;email&amp;#34; : 1}) select username, email from users db.users.find({}, {&amp;#34;username&amp;#34; : 1, &amp;#34;_id&amp;#34; : 0}) // no case // 即时加上了列筛选，_id也会返回；必须显式的阻止_id返回 db.users.find({&amp;#34;age&amp;#34; : {&amp;#34;$gte&amp;#34; : 18, &amp;#34;$lte&amp;#34; : 30}}) select * from users where age &amp;gt;=18 and age &amp;lt;= 30 // $lt(&amp;lt;) $lte(&amp;lt;=) $gt(&amp;gt;) $gte(&amp;gt;=) db.</description>
    </item>
    
    <item>
      <title>mongoDB</title>
      <link>https://hjkl01.github.io/docker/mongo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/mongo/</guid>
      <description># .env MONGO_ROOT_USER=username MONGO_ROOT_PASSWORD=password MONGODB_URL=mongodb://username:password@mongo:27017 version: &amp;#39;3.1&amp;#39; services: mongo: image: mongo restart: always ports: - 27017:27017 environment: - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER} - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD} volumes: - ./data/mongo:/data/db mongo-express: image: mongo-express restart: always ports: - 8081:8081 links: - mongo environment: - ME_CONFIG_MONGODB_URL=${MONGODB_URL} - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_ROOT_USER} - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_ROOT_PASSWORD} </description>
    </item>
    
    <item>
      <title>multiprocessing</title>
      <link>https://hjkl01.github.io/python/multiprocessing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/multiprocessing/</guid>
      <description>import multiprocessing def f(msg): print(msg) return multiprocessing.current_process().name + &amp;#39;-&amp;#39; + msg def func1(): pool = multiprocessing.Pool(processes=multiprocessing.cpu_count()) results = [] for i in range(10): msg = &amp;#34;hello %d&amp;#34; % (i) results.append(pool.apply_async(f, (msg, ))) pool.close() pool.join() print(&amp;#34;Sub-process(es) done.&amp;#34;) for res in results: print(res.get()) def func2(): from multiprocessing import Pool # with Pool(5) as p: with Pool(processes=multiprocessing.cpu_count()) as p: print(p.map(f, [str(i) for i in range(9)])) if __name__ == &amp;#34;__main__&amp;#34;: # func1() func2() </description>
    </item>
    
    <item>
      <title>mysql</title>
      <link>https://hjkl01.github.io/docker/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/mysql/</guid>
      <description>version: &amp;#39;3.1&amp;#39; services: db: # We use a mariadb image which supports both amd64 &amp;amp; arm64 architecture image: mariadb:10.6.4-focal # If you really want to use MySQL, uncomment the following line #image: mysql:8.0.27 command: &amp;#39;--default-authentication-plugin=mysql_native_password&amp;#39; volumes: - ./data/mysql:/var/lib/mysql restart: always environment: - MYSQL_ROOT_PASSWORD=password - MYSQL_DATABASE=data - MYSQL_USER=user - MYSQL_PASSWORD=password - MYSQL_ROOT_HOST=% ports: - 3306:3306 # linux配置 /etc/mysql/my.cnf: [client] default-character-set = utf8 [mysqld] default-storage-engine = INNODB character-set-server = utf8 collation-server = utf8_general_ci # others protected-mode yes mysqldump -u root -p --all-databases &amp;gt; data.</description>
    </item>
    
    <item>
      <title>neovim</title>
      <link>https://hjkl01.github.io/linux/neovim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/neovim/</guid>
      <description>我的neovim配置 https://github.com/hjkl01/init.vim
插件 # status/tabline vim-airline/vim-airline Plug &amp;#39;vim-airline/vim-airline&amp;#39; Plug &amp;#39;vim-airline/vim-airline-themes&amp;#39; let g:airline#extensions#tabline#formatter = &amp;#39;default&amp;#39; let g:airline#extensions#tabline#enabled = 1 &amp;#34; let g:airline#extensions#tabline#left_sep = &amp;#39; &amp;#39; &amp;#34; let g:airline#extensions#tabline#left_alt_sep = &amp;#39;|&amp;#39; &amp;#34; let g:airline#extensions#tabline#enabled = 1 &amp;#34; let g:airline#extensions#tabline#tab_nr_type = 1 &amp;#34; tab number &amp;#34; let g:airline#extensions#tabline#show_tab_nr = 1 &amp;#34; let g:airline#extensions#tabline#formatter = &amp;#39;default&amp;#39; &amp;#34; let g:airline#extensions#tabline#buffer_nr_show = 0 &amp;#34; let g:airline#extensions#tabline#fnametruncate = 16 &amp;#34; let g:airline#extensions#tabline#fnamecollapse = 2 &amp;#34; let g:airline#extensions#tabline#buffer_idx_mode = 1 let g:airline_theme=&amp;#39;molokai&amp;#39; # format file Plug &amp;#39;Chiel92/vim-autoformat&amp;#39; &amp;#34; autocmd BufWrite * :Autoformat let g:autoformat_autoindent = 1 let g:autoformat_retab = 1 let g:autoformat_remove_trailing_spaces = 1 # 文件目录 Plug &amp;#39;preservim/nerdtree&amp;#39; let g:NERDTreeWinPos = &amp;#34;right&amp;#34; let NERDTreeShowHidden=1 let NERDTreeShowLineNumbers=1 let NERDTreeIgnore = [&amp;#39;\.</description>
    </item>
    
    <item>
      <title>nginx</title>
      <link>https://hjkl01.github.io/linux/nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/nginx/</guid>
      <description>推荐在线配置 https://digitalocean.github.io/nginxconfig.io/?global.app.lang=zhCN
https证书 # 安装certbot yay -S --noconfirm certbot sudo certbot certonly --standalone -d domain sudo certbot certonly -d domain --webroot -w /html/filepath/ sudo crontab -e 15 2 * */2 * systemctl stop nginx.service &amp;amp;&amp;amp; certbot renew &amp;amp;&amp;amp; systemctl restart nginx.service 基本配置 server { listen 80; listen [::]:80; server_name blog.hjkl01.cn; # 静态文件 root /html/github; location / { index index.html index.htm; } # django location /static/ { alias /home/ubuntu/djangoapp/static/; } location /media/ { alias /home/ubuntu/djangoapp/media/; } location / { proxy_pass http://127.</description>
    </item>
    
    <item>
      <title>nocodb</title>
      <link>https://hjkl01.github.io/docker/nocodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/nocodb/</guid>
      <description>version: &amp;#39;3.3&amp;#39; services: root_db: image: postgres:13-alpine restart: unless-stopped ports: - 5432:5432 command: postgres -c &amp;#39;max_connections=500&amp;#39; environment: POSTGRES_PASSWORD: &amp;#39;passwd&amp;#39; POSTGRES_USER: &amp;#39;username&amp;#39; POSTGRES_DB: &amp;#39;postgres&amp;#39; PGDATA: &amp;#39;/var/lib/postgresql/data&amp;#39; healthcheck: test: pg_isready -U &amp;#34;$$POSTGRES_USER&amp;#34; -d &amp;#34;$$POSTGRES_DB&amp;#34; interval: 10s timeout: 2s retries: 10 volumes: - ./data/nocodb_pg:/var/lib/postgresql/data nocodb: depends_on: root_db: condition: service_healthy image: nocodb/nocodb:latest ports: - &amp;#34;8080:8080&amp;#34; - &amp;#34;8081:8081&amp;#34; - &amp;#34;8082:8082&amp;#34; - &amp;#34;8083:8083&amp;#34; restart: always environment: NC_DB: &amp;#34;pg://root_db:5432?u=username&amp;amp;p=passwd&amp;amp;d=postgres&amp;#34; </description>
    </item>
    
    <item>
      <title>npm</title>
      <link>https://hjkl01.github.io/linux/yarn_npm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/yarn_npm/</guid>
      <description>yarn/npm 设置国内源 # 临时 npm --registry https://registry.npm.taobao.org install express # 写入文件 yarn config set registry &amp;#39;https://registry.npm.taobao.org&amp;#39; yarn config get registry npm config set registry https://registry.npm.taobao.org npm config get registry use yrm npm install -g yrm # yarn global add yrm yrm ls yrm use taobao yrm test </description>
    </item>
    
    <item>
      <title>ocr</title>
      <link>https://hjkl01.github.io/python/ocr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/ocr/</guid>
      <description>https://github.com/breezedeus/cnocr </description>
    </item>
    
    <item>
      <title>pgadmin4</title>
      <link>https://hjkl01.github.io/docker/pgadmin4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/pgadmin4/</guid>
      <description>version: &amp;#39;3.5&amp;#39; services: pgadmin: container_name: pgadmin4_container image: dpage/pgadmin4 restart: always environment: PGADMIN_DEFAULT_EMAIL: xx@xx.com PGADMIN_DEFAULT_PASSWORD: password ports: - &amp;#34;80:80&amp;#34; </description>
    </item>
    
    <item>
      <title>pip</title>
      <link>https://hjkl01.github.io/python/pip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/pip/</guid>
      <description># virtualenv (sudo) pip install virtualenv virtualenv -p /usr/bin/python3.7 ~/.virtualenv/py3 # pip freeze &amp;gt; requirements.txt # pipenv alias pv=&amp;#39;pipenv run python&amp;#39; alias pi=&amp;#39;pipenv run pip install &amp;#39; # pip.conf - ### 一次 pip install web.py -i http://pypi.douban.com/simple --trusted-host pypi.douban.com - ### 全局 # 清华源 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple # 阿里源 pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ # 腾讯源 pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple # 豆瓣源 pip config set global.index-url http://pypi.douban.com/simple/ or # linux:`~/.</description>
    </item>
    
    <item>
      <title>postgresql</title>
      <link>https://hjkl01.github.io/docker/postgresql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/postgresql/</guid>
      <description>version: &amp;#39;3&amp;#39; services: db: image: postgres:10-alpine restart: always ports: - 5432:5432 environment: POSTGRES_PASSWORD: &amp;#39;password&amp;#39; POSTGRES_USER: &amp;#39;user&amp;#39; POSTGRES_DB: &amp;#39;postgres&amp;#39; PGDATA: &amp;#39;/var/lib/postgresql/data&amp;#39; volumes: - ./postgres:/var/lib/postgresql/data admin: image: adminer restart: always depends_on: - db ports: - 8080:8080 # 可视化工具推荐 docker run -d -e SESSIONS=true -p 8081:8081 sosedoff/pgweb # mac tableplus # 在linux 中安装 sudo apt-get install postgresql-client sudo apt-get install postgresql # sudo apt-get install pgadmin3 # pgcli sudo adduser dbuser sudo su - postgres # sudo -u postgres psql psql \password postgres CREATE USER dbuser WITH PASSWORD &amp;#39;password&amp;#39;; CREATE DATABASE exampledb OWNER dbuser; GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser; psql -U dbuser -d exampledb -h 127.</description>
    </item>
    
    <item>
      <title>prest</title>
      <link>https://hjkl01.github.io/docker/prest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/prest/</guid>
      <description># https://github.com/prest/prest#test-using-docker version: &amp;#34;3&amp;#34; services: postgres: image: postgres volumes: - &amp;#34;./data/postgres:/var/lib/postgresql/data&amp;#34; environment: - POSTGRES_USER=prest - POSTGRES_DB=prest - POSTGRES_PASSWORD=prest ports: - &amp;#34;5432:5432&amp;#34; healthcheck: test: [&amp;#34;CMD-SHELL&amp;#34;, &amp;#34;pg_isready&amp;#34;, &amp;#34;-U&amp;#34;, &amp;#34;prest&amp;#34;] interval: 30s retries: 3 prest: # use latest build - analyze the risk of using this version in production image: prest/prest links: - &amp;#34;postgres:postgres&amp;#34; environment: - PREST_DEBUG=false - PREST_AUTH_ENABLED=true - PREST_PG_HOST=postgres - PREST_PG_USER=prest - PREST_PG_PASS=prest - PREST_PG_DATABASE=prest - PREST_PG_PORT=5432 - PREST_SSL_MODE=disable depends_on: postgres: condition: service_healthy ports: - &amp;#34;3000:3000&amp;#34; </description>
    </item>
    
    <item>
      <title>proxy</title>
      <link>https://hjkl01.github.io/linux/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/proxy/</guid>
      <description>trojan-go brew install trojan-go 修改 /usr/local/etc/trojan-go/config.json brew service start trojan-go glider yay -S glider glider -listen :1080 -forward trojan://password@ip:443 # with auth glider -listen user:user_passwd@:61000 -forward trojan://password@ip:443 # or glider.conf listen=:1080 forward=trojan://password@ip:443 trojan https://github.com/trojan-gfw/trojan ### 机场推荐: https://portal.shadowsocks.nz/aff.php?aff=24252 ### 部署 https://github.com/Jrohy/trojan 旧 server: install libsodium pip install shadowsocks pip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U # path : /etc/shadowsocks.json { &amp;#34;server&amp;#34;:&amp;#34;0.0.0.0&amp;#34;, &amp;#34;port_password&amp;#34;: { &amp;#34;8000&amp;#34;: &amp;#34;password&amp;#34; }, &amp;#34;timeout&amp;#34;:300, &amp;#34;method&amp;#34;:&amp;#34;chacha20-ietf-poly1305&amp;#34;, &amp;#34;fast_open&amp;#34;:true, &amp;#34;pid-file&amp;#34;: &amp;#34;/path/ss.pid&amp;#34;, &amp;#34;log-file&amp;#34;: &amp;#34;/path/ss.log&amp;#34; } (sudo) ssserver -c /etc/shadowsocks.</description>
    </item>
    
    <item>
      <title>python send mail</title>
      <link>https://hjkl01.github.io/python/fastapi_mail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/fastapi_mail/</guid>
      <description>fastapi send mail API import uvicorn from fastapi import FastAPI, BackgroundTasks, UploadFile, File, Form from starlette.responses import JSONResponse from fastapi_mail import FastMail, MessageSchema, ConnectionConfig from pydantic import BaseModel, EmailStr from typing import List, Text class EmailSchema(BaseModel): email: List[EmailStr] html: Text conf = ConnectionConfig( # update username, password, from # example qq mail # https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;amp;&amp;amp;id=28&amp;amp;&amp;amp;no=1001256 MAIL_USERNAME=&amp;#34;qq123456&amp;#34;, MAIL_PASSWORD=&amp;#34;password&amp;#34;, MAIL_FROM=&amp;#34;qq123456@qq.com&amp;#34;, MAIL_PORT=587, MAIL_SERVER=&amp;#34;smtp.qq.com&amp;#34;, MAIL_TLS=True, MAIL_SSL=False, USE_CREDENTIALS=True, VALIDATE_CERTS=True, ) app = FastAPI() html = &amp;#34;&amp;#34;&amp;#34; &amp;lt;p&amp;gt;Thanks for using Fastapi-mail&amp;lt;/p&amp;gt; &amp;#34;&amp;#34;&amp;#34; @app.</description>
    </item>
    
    <item>
      <title>redis</title>
      <link>https://hjkl01.github.io/docker/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/redis/</guid>
      <description># redis 及其持久化 # redis.conf requirepass 123456 appendonly yes daemonize no version: &amp;#39;3&amp;#39; services: redis: image: redis restart: unless-stopped # command: redis-server --requirepass 123456 command: redis-server /usr/local/etc/redis/redis.conf ports: - 6379:6379 volumes: - ./redis.conf:/usr/local/etc/redis/redis.conf - ./data/redis:/data/ </description>
    </item>
    
    <item>
      <title>remote desktop</title>
      <link>https://hjkl01.github.io/linux/todesk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/todesk/</guid>
      <description>arch install todesk wget https://dl.todesk.com/linux/todesk_2.0.2_x86_64.pkg.tar.zst sudo pacman -U todesk_2.0.2_x86_64.pkg.tar.zst sudo systemctl restart todeskd.service 详情参考: https://www.todesk.com/download_detail.html</description>
    </item>
    
    <item>
      <title>samba</title>
      <link>https://hjkl01.github.io/docker/samba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/samba/</guid>
      <description>version: &amp;#39;3.4&amp;#39; services: samba: image: dperson/samba environment: TZ: &amp;#39;EST5EDT&amp;#39; networks: - default ports: - &amp;#34;137:137/udp&amp;#34; - &amp;#34;138:138/udp&amp;#34; - &amp;#34;139:139/tcp&amp;#34; - &amp;#34;445:445/tcp&amp;#34; read_only: true tmpfs: - /tmp restart: unless-stopped stdin_open: true tty: true volumes: - /data:/mnt:z command: &amp;#39;-s &amp;#34;Volume;/mnt;yes;no;no;USER&amp;#34; -u &amp;#34;USER;PASSWORD&amp;#34; -p&amp;#39; </description>
    </item>
    
    <item>
      <title>samba</title>
      <link>https://hjkl01.github.io/linux/samba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/samba/</guid>
      <description>在arch 中安装参考 https://wiki.archlinux.org/title/samba 在ubuntu中安装 sudo apt-get install samba sudo useradd xxx sudo smbpasswd -a xxx sudo vi /etc/samba/smb.conf #### 配置内加入以下内容 [dev] comment = dev path = /var/dev valid user = xxx write list = xxx create mask = 0664 directory mask = 0775 force user = xxx force group = xxx public = no available = yes browseable = yes security = user ### 重启samba【sudo service smbd restart】 </description>
    </item>
    
    <item>
      <title>settings.py</title>
      <link>https://hjkl01.github.io/python/settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/settings/</guid>
      <description># pip install python-dotenv pyyaml loguru import os import sys import toml import yaml from loguru import logger from dotenv import load_dotenv BASE_DIR = os.path.abspath(os.path.dirname(__file__)).rstrip(&amp;#34;/common&amp;#34;) log_file_path = os.path.join(BASE_DIR, &amp;#34;logs/stdout.log&amp;#34;) err_log_file_path = os.path.join(BASE_DIR, &amp;#34;logs/error.log&amp;#34;) logger.add( log_file_path, format=&amp;#34;{process} {thread} {time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}&amp;#34;, rotation=&amp;#34;100 MB&amp;#34;, colorize=True, enqueue=True, backtrace=True, diagnose=True, level=&amp;#34;INFO&amp;#34;, ) logger.add( err_log_file_path, format=&amp;#34;{time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}&amp;#34;, rotation=&amp;#34;100 MB&amp;#34;, level=&amp;#34;ERROR&amp;#34;, colorize=True, enqueue=True, backtrace=True, diagnose=True, ) class SettingsMeta: def __init__(self, _file=None): self.file = _file # read config.</description>
    </item>
    
    <item>
      <title>socks5 转 http 之 privoxy</title>
      <link>https://hjkl01.github.io/linux/privoxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/privoxy/</guid>
      <description>socks5 转 http privoxy 配置 yay -S privoxy cd /etc/privoxy (sudo) mv config config.bak (sudo) vi config forward-socks5t / 127.0.0.1:1080 . listen-address 127.0.0.1:9888 sudo systemctl restart privoxy.service sudo systemctl enable privoxy.service </description>
    </item>
    
    <item>
      <title>spider-selenium</title>
      <link>https://hjkl01.github.io/python/spider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/spider/</guid>
      <description>import random from selenium import webdriver from time import sleep from bs4 import BeautifulSoup as BS options = webdriver.ChromeOptions() UA = &amp;#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&amp;#39; options.add_argument(f&amp;#39;user-agent={UA}&amp;#39;) options.add_experimental_option(&amp;#34;excludeSwitches&amp;#34;, [&amp;#34;enable-automation&amp;#34;]) options.add_experimental_option(&amp;#39;useAutomationExtension&amp;#39;, False) # 没有配置环境变量的话需要填写Chromedriver的路径：webdriver.Chrome(executable_path=&amp;#34;***&amp;#34;) driver = webdriver.Chrome(options=options) driver.maximize_window() # 去掉window.navigator.webdriver字段，防止被检测出是使用selenium driver.execute_cdp_cmd(&amp;#34;Page.addScriptToEvaluateOnNewDocument&amp;#34;, { &amp;#34;source&amp;#34;: &amp;#34;&amp;#34;&amp;#34; Object.defineProperty(navigator, &amp;#39;webdriver&amp;#39;, { get: () =&amp;gt; undefined }) &amp;#34;&amp;#34;&amp;#34; }) </description>
    </item>
    
    <item>
      <title>starchart</title>
      <link>https://hjkl01.github.io/linux/starcharts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/starcharts/</guid>
      <description>星图 在markdown中的代码: ![stars](https://starchart.cc/lesssound/pornhub.svg) example: </description>
    </item>
    
    <item>
      <title>supervisor </title>
      <link>https://hjkl01.github.io/linux/supervisor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/supervisor/</guid>
      <description>后缀为conf或ini [program:frp_ssh] command = /home/user/frp/frpc -c /home/user/frp/config.ini directory = /home/user/somedir user = user autostart = true autorestart = true startsecs = 3 redirect_stderr = true stdout_logfile_maxbytes = 50MB stdout_logfile_backups = 10 stdout_logfile = /home/user/frp/log </description>
    </item>
    
    <item>
      <title>SwitchyOmega</title>
      <link>https://hjkl01.github.io/linux/switchyomega/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/switchyomega/</guid>
      <description>config SwitchyOmega 访问变慢
关闭chrome的安全dns
Privacy and Security -&amp;gt; Security -&amp;gt; Use Secure DNS
参考: https://github.com/FelisCatus/SwitchyOmega/issues/1742#issuecomment-826272936</description>
    </item>
    
    <item>
      <title>ubuntu</title>
      <link>https://hjkl01.github.io/linux/ubuntu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/ubuntu/</guid>
      <description>中文乱码 sudo apt-get -y install language-pack-zh-hans #写入 ~/.zshrc: LC_ALL=zh_CN.utf8 export LC_ALL source ~/.zshrc 配置静态IP path: `/etc/network/interface` auto eth1 iface eth1 inet static address 192.168.56.xx netmask 255.255.255.0 network 192.168.56.0 broadcast 192.168.56.255 if possible, 配置路由器中的dhcp. ip route sudo route add -net 66.1.254.0/24 gw 66.16.62.254 enp4s0 sudo ip addr flush dev enp4s0 安装Ubuntu 分区 efi swap	交换空间 / ext4 /boot	200M左右	ext4	/tmp	5G左右	ext4	手动配置swap内存 sudo fallocate -l 4G /swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile sudo vim /etc/fstab /swapfile none swap sw 0 0 </description>
    </item>
    
    <item>
      <title>vnc</title>
      <link>https://hjkl01.github.io/linux/vnc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/linux/vnc/</guid>
      <description>服务端安装 # ubuntu sudo apt-get install x11vnc x11vnc -storepasswd x11vnc -auth guess -once -loop -noxdamage -repeat -rfbauth ~/.vnc/passwd -rfbport 5900 -shared x11vnc -forever https://www.realvnc.com/en/connect/download/viewer/ # arch yay -S x11vnc net-tools update -&amp;gt; /etc/gdm/custom.conf: WaylandEnable=false x11vnc -wait 50 -noxdamage -passwd PASSWORD -display :0 -forever -o /var/log/x11vnc.log -bg 客户端 https://www.realvnc.com/
# 错误 # display_server_not_supported # /etc/gdm3/custom.conf [daemon] # Enabling automatic login AutomaticLoginEnable=true AutomaticLogin=$USERNAME sudo systemctl restart gdm.service </description>
    </item>
    
    <item>
      <title>书签管理器 shiori</title>
      <link>https://hjkl01.github.io/docker/shiori/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/shiori/</guid>
      <description># 原链接 https://github.com/go-shiori/shiori/ # loginuser: shiori # passwd: gopher version: &amp;#34;2.1&amp;#34; services: shiori: image: nicholaswilde/shiori:latest container_name: shiori-default environment: TZ: Asia/Shanghai PUID: 1000 PGID: 1000 SHIORI_PG_HOST: db SHIORI_PG_PORT: 5432 SHIORI_PG_USER: user SHIORI_PG_PASS: password SHIORI_PG_NAME: &amp;#34;&amp;#34; ports: - 8080:8080 restart: unless-stopped volumes: - ./data/shiori:/data depends_on: - db db: image: postgres restart: always environment: POSTGRES_USER: user POSTGRES_PASSWORD: password volumes: - ./data/shiori_postgres:/var/lib/postgresql/data </description>
    </item>
    
    <item>
      <title>网盘 cloudreve</title>
      <link>https://hjkl01.github.io/docker/cloudreve/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/docker/cloudreve/</guid>
      <description># mkdir -vp cloudreve/{uploads,avatar} \ &amp;amp;&amp;amp; touch cloudreve/conf.ini \ &amp;amp;&amp;amp; touch cloudreve/cloudreve.db \ &amp;amp;&amp;amp; mkdir -p aria2/config \ &amp;amp;&amp;amp; mkdir -p data/aria2 \ &amp;amp;&amp;amp; chmod -R 777 data/aria2 version: &amp;#34;3.8&amp;#34; services: cloudreve: container_name: cloudreve image: cloudreve/cloudreve:latest restart: unless-stopped ports: - &amp;#34;5212:5212&amp;#34; volumes: - ./data/aria2/downloads:/downloads - ./data/cloudreve/uploads:/cloudreve/uploads - ./data/cloudreve/conf.ini:/cloudreve/conf.ini - ./data/cloudreve/cloudreve.db:/cloudreve/cloudreve.db - ./data/cloudreve/avatar:/cloudreve/avatar depends_on: - Aria2-Pro Aria2-Pro: container_name: aria2-pro image: p3terx/aria2-pro environment: - PUID=65534 - PGID=65534 - UMASK_SET=022 - RPC_SECRET=0b5c74bcc83fc89f29b6f9f4e8a812ef87f69258 - RPC_PORT=6800 - LISTEN_PORT=6888 - DISK_CACHE=64M - IPV6_MODE=true - UPDATE_TRACKERS=true # - CUSTOM_TRACKER_URL= - TZ=Asia/Shanghai volumes: - .</description>
    </item>
    
  </channel>
</rss>
