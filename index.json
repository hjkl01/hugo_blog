[
{
	"uri": "/linux/adb/",
	"title": "adb",
	"tags": [],
	"description": "",
	"content": "# adb commands adb devices #查看连接设备 adb start-server 启动adb 服务，基本不会用到，因为只要设备连接正确，会自动启动adb server adb kill-server 停止adb server adb -s cf27456f shell # 指定连接设备使用命令 adb install test.apk # 安装应用 adb install -r demo.apk #安装apk 到sd 卡： adb uninstall cn.com.test.mobile #卸载应用，需要指定包 adb uninstall -k cn.com.test.mobile #卸载app 但保留数据和缓存文件 adb shell pm list packages #列出手机装的所有app 的包名 adb shell pm list packages -s 列出系统应用的所有包名 adb shell pm list packages -3 #列出除了系统应用的第三方应用包名 adb shell pm clear cn.com.test.mobile #清除应用数据与缓存 adb shell am start -ncn.com.test.mobile/.ui.SplashActivity #启动应用 adb shell dumpsys package #包信息Package Information adb shell dumpsys meminfo #内存使用情况Memory Usage adb shell am force-stop cn.com.test.mobile #强制停止应用 adb logcat #查看日志 adb logcat -c #清除log 缓存 adb reboot #重启 adb get-serialno #获取序列号 adb shell getprop ro.build.version.release #查看Android 系统版本 adb shell top -s 10 #查看占用内存前10 的app adb push \u0026lt;local\u0026gt; \u0026lt;remote\u0026gt; #从本地复制文件到设备 adb pull \u0026lt;remote\u0026gt; \u0026lt;local\u0026gt; #从设备复制文件到本地 adb bugreport #查看bug 报告 adb help #查看ADB 帮助 "
},
{
	"uri": "/docker/hoppscotch/",
	"title": "API tool: httpbin &amp;&amp; hoppscotch",
	"tags": [],
	"description": "",
	"content": "version: \u0026#39;3.1\u0026#39; services: httpbin: image: kennethreitz/httpbin container_name: httpbin restart: always ports: - \u0026#34;127.0.0.1:7999:80\u0026#34; hoppscotch: image: hoppscotch/hoppscotch:latest container_name: hoppscotch restart: always ports: - \u0026#34;127.0.0.1:3000:3000\u0026#34; "
},
{
	"uri": "/linux/arch/",
	"title": "arch",
	"tags": [],
	"description": "",
	"content": "wiki link: https://gitlab.com/drizzt/vps2arch/-/wikis/Tested-VPS-Providers\n⚠️ 设置root的密码 wget https://tinyurl.com/vps2arch 也会被重定向到以下 url wget https://gitlab.com/drizzt/vps2arch/-/raw/master/vps2arch 启动脚本 sh ./vps2arch # 当你从脚本默认的源下载速度较慢的时候，可以使用 -m 参数指定源，例如 sudo sh ./vps2arch -m https://mirrors.neusoft.edu.cn/archlinux/ sync ; reboot -f 源设置 /etc/pacman.d/mirrorlist # 清华大学 Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch # 南京大学 Server = https://mirror.nju.edu.cn/archlinux/$repo/os/$arch # or sudo pacman-mirrors -i -c China sudo pacman -Syy yay pacman -S --needed git base-devel git clone https://aur.archlinux.org/yay-bin.git cd yay-bin makepkg -si 使用 ntp pacman -S ntp timedatectl set-ntp true # 设置时区 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc utf8 编辑 /etc/locale.gen 取消一下行的注释（你可能需要一个编辑器，如 vim，请自行安装）\nen_GB.UTF-8 UTF-8 zh_CN.UTF-8 UTF-8 执行 locale-gen\n创建 /etc/locale.conf 并编辑 LANG 这一 变量，比如：\nLANG=zh_CN.UTF-8\n我的配置 https://github.com/hjkl01/dotfiles 输入法 sudo pacman -Rs $(pacman -Qsq fcitx) sudo pacman -S fcitx5 fcitx5-configtool fcitx5-qt fcitx5-gtk fcitx5-chinese-addons vi ~/.xprofile export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=\u0026#34;@im=fcitx\u0026#34; fcitx5 \u0026amp; "
},
{
	"uri": "/linux/arch-pppoe/",
	"title": "arch pppoe",
	"tags": [],
	"description": "",
	"content": "pppoe 拨号 yay -S --noconfirm rp-pppoe ifconfig # 查看对应的网卡 sudo ifconfig 网卡 down # 停止网卡服务 sudo pppoe-setup # 输入对应的用户名密码等信息 sudo pppoe-start sudo route delete default sudo route add default ppp0 # ppp0可能是其他名字 ifconfig查看 sudo nvim /etc/resolvconf.conf # 更新name_servers sudo resolvconf -u # 更新DNS "
},
{
	"uri": "/docker/emby/",
	"title": "aria2 &amp;&amp; jellyfin or embyserver ",
	"tags": [],
	"description": "",
	"content": "version: \u0026#34;3.8\u0026#34; services: Aria2-Pro: container_name: aria2-pro image: p3terx/aria2-pro environment: - PUID=65534 - PGID=65534 - UMASK_SET=022 - RPC_SECRET=update_me - RPC_PORT=6800 - LISTEN_PORT=6888 - DISK_CACHE=64M - IPV6_MODE=true - UPDATE_TRACKERS=true - CUSTOM_TRACKER_URL= - TZ=Asia/Shanghai volumes: - ${PWD}/data/aria2-config:/config # - ${PWD}/data/embyserver/movies:/downloads - ${PWD}/data/jellyfin/movies:/downloads ports: - 6800:6800 - 6888:6888 - 6888:6888/udp restart: unless-stopped logging: driver: json-file options: max-size: 1m AriaNg: container_name: ariang image: p3terx/ariang command: --port 6880 --ipv6 ports: - 192.168.50.4:6880:6880 restart: unless-stopped logging: driver: json-file options: max-size: 1m version: \u0026#34;2.3\u0026#34; services: jellyfin: image: jellyfin/jellyfin:latest container_name: jellyfin_server volumes: - ./data/jellyfin/config:/config # Configuration directory - ./data/jellyfin/cache:/cache - ./data/jellyfin/movies:/media ports: - 8096:8096 # HTTP port restart: unless-stopped version: \u0026#34;2.3\u0026#34; services: emby: image: emby/embyserver container_name: embyserver runtime: nvidia # Expose NVIDIA GPUs # network_mode: host # Enable DLNA and Wake-on-Lan environment: - UID=1000 # The UID to run emby as (default: 2) - GID=100 # The GID to run emby as (default 2) - GIDLIST=100 # A comma-separated list of additional GIDs to run emby as (default: 2) volumes: - ./data/embyserver/programdata:/config # Configuration directory - ./data/embyserver/tvshows:/mnt/share1 # Media directory - ./data/embyserver/movies:/media ports: - 8096:8096 # HTTP port # - 8920:8920 # HTTPS port devices: - /dev/dri:/dev/dri # VAAPI/NVDEC/NVENC render nodes # - /dev/vchiq:/dev/vchiq # MMAL/OMX on Raspberry Pi restart: unless-stopped "
},
{
	"uri": "/linux/asdf/",
	"title": "asdf",
	"tags": [],
	"description": "",
	"content": "install asdf git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.0 # add following to ~/.zshrc . $HOME/.asdf/asdf.sh install plugin asdf plugin add nodejs asdf list all nodejs asdf install nodejs lts # asdf install nodejs latest asdf list nodejs asdf global nodejs lts "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/python/celery/",
	"title": "celery",
	"tags": [],
	"description": "",
	"content": "celery 用法 # test.py import time from datetime import datetime from celery import Celery # result_address = \u0026#39;elasticsearch://user:passwd@ip:port/index\u0026#39; broker = \u0026#39;redis://:passwd@ip:port/db\u0026#39; result_address = \u0026#34;mongodb://user:password@ip:port/db\u0026#34; app = Celery(\u0026#34;tasks\u0026#34;, broker=broker, backend=result_address) def my_on_failure(exc, task_id, args, kwargs, einfo): print(\u0026#34;task failed\u0026#34;) for argv in [exc, task_id, args, kwargs, einfo]: print(argv) app.conf.update( task_serializer=\u0026#34;json\u0026#34;, accept_content=[\u0026#34;json\u0026#34;], # Ignore other content result_serializer=\u0026#34;json\u0026#34;, timezone=\u0026#34;Asia/Shanghai\u0026#34;, enable_utc=True, # 下面这个就是限制tasks模块下的add函数，每秒钟只能执行10次 # CELERY_ANNOTATIONS = {\u0026#39;tasks.add\u0026#39;:{\u0026#39;rate_limit\u0026#39;:\u0026#39;10/s\u0026#39;}} # 或者限制所有的任务的刷新频率 task_annotations={\u0026#34;tasks.add\u0026#34;: {\u0026#34;rate_limit\u0026#34;: \u0026#34;2/m\u0026#34;}}, # annotations={\u0026#34;tasks.add\u0026#34;: {\u0026#34;rate_limit\u0026#34;: \u0026#34;5/m\u0026#34;, \u0026#34;on_failure\u0026#34;: my_on_failure}}, # annotations={\u0026#34;*\u0026#34;: {\u0026#34;rate_limit\u0026#34;: \u0026#34;10/s\u0026#34;, \u0026#34;on_failure\u0026#34;: my_on_failure}}, # celery worker的并发数，默认是服务器的内核数目,也是命令行-c参数指定的数目 worker_concurrency=10, # celery worker 每次去BROKER中预取任务的数量 prefetch_multiplier=1, # 单个任务的运行时间限制，否则会被杀死 task_time_limit=60, # 压缩方案选择，可以是zlib, bzip2，默认是发送没有压缩的数据 message_compression=\u0026#34;zlib\u0026#34;, ) @app.task(default_retry_delay=30, max_retries=2, retry_kwargs={\u0026#34;max_retries\u0026#34;: 3}) def add(x, y): print(x, y) # time.sleep(3) return x + y @app.task def sleep(seconds): time.sleep(seconds) @app.task def echo(msg, timestamp=False): time.sleep(3) return \u0026#34;%s: %s\u0026#34; % (datetime.now(), msg) if timestamp else msg @app.task def error(msg): raise Exception(msg) # generate.py # https://github.com/mher/flower/blob/master/docs/api.ipynb import requests import json def main(): api_root = \u0026#34;http://localhost:5566/api\u0026#34; task_api = \u0026#34;{}/task\u0026#34;.format(api_root) url = \u0026#34;{}/queues/length\u0026#34;.format(api_root) print(url) resp = requests.get(url) print(resp.json()) for i in range(20): args = {\u0026#34;args\u0026#34;: [i, i**i]} url = \u0026#34;{}/async-apply/tasks.add\u0026#34;.format(task_api) # url = \u0026#34;{}/apply/tasks.add\u0026#34;.format(task_api) print(url) resp = requests.post(url, data=json.dumps(args)) reply = resp.json() print(reply) args = {\u0026#34;args\u0026#34;: [i, True]} url = \u0026#34;{}/async-apply/tasks.echo\u0026#34;.format(task_api) print(url) resp = requests.post(url, data=json.dumps(args)) reply = resp.json() print(reply) # url = \u0026#34;{}/result/{}\u0026#34;.format(task_api, reply[\u0026#34;task-id\u0026#34;]) # print(url) # resp = requests.get(url) # print(resp.json()) main() celery -A tasks worker --loglevel=info \u0026gt;\u0026gt; logs/celery_worker.log 2\u0026gt;\u0026amp;1 \u0026amp; celery -A tasks flower --loglevel=info --address=127.0.0.1 --port=5566 \u0026gt;\u0026gt; logs/celery_flower.log 2\u0026gt;\u0026amp;1 \u0026amp; "
},
{
	"uri": "/linux/chrome/",
	"title": "chrome",
	"tags": [],
	"description": "",
	"content": "web scraper https://chrome.google.com/webstore/detail/web-scraper-free-web-scra/jnhgnonknehpejjnehehllkliplmbmhn {\u0026#34;_id\u0026#34;:\u0026#34;test\u0026#34;,\u0026#34;startUrl\u0026#34;:[\u0026#34;https://list.jd.com/list.html?cat=9987,653,655\u0026#34;,\u0026#34;https://list.jd.com/list.html?cat=9987,653,655\u0026amp;page=2\u0026amp;s=58\u0026amp;click=0\u0026#34;],\u0026#34;selectors\u0026#34;:[{\u0026#34;delay\u0026#34;:0,\u0026#34;id\u0026#34;:\u0026#34;name\u0026#34;,\u0026#34;multiple\u0026#34;:true,\u0026#34;parentSelectors\u0026#34;:[\u0026#34;_root\u0026#34;],\u0026#34;selector\u0026#34;:\u0026#34;#J_goodsList \u0026gt; ul \u0026gt; li\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;SelectorElement\u0026#34;},{\u0026#34;delay\u0026#34;:0,\u0026#34;id\u0026#34;:\u0026#34;sku_name\u0026#34;,\u0026#34;multiple\u0026#34;:false,\u0026#34;parentSelectors\u0026#34;:[\u0026#34;name\u0026#34;],\u0026#34;regex\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;selector\u0026#34;:\u0026#34;a em\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;SelectorText\u0026#34;},{\u0026#34;delay\u0026#34;:0,\u0026#34;id\u0026#34;:\u0026#34;price\u0026#34;,\u0026#34;multiple\u0026#34;:false,\u0026#34;parentSelectors\u0026#34;:[\u0026#34;name\u0026#34;],\u0026#34;regex\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;selector\u0026#34;:\u0026#34; div \u0026gt; div.p-price \u0026gt; strong \u0026gt; i\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;SelectorText\u0026#34;},{\u0026#34;delay\u0026#34;:0,\u0026#34;id\u0026#34;:\u0026#34;comments\u0026#34;,\u0026#34;multiple\u0026#34;:false,\u0026#34;parentSelectors\u0026#34;:[\u0026#34;name\u0026#34;],\u0026#34;regex\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;selector\u0026#34;:\u0026#34;.p-commit strong a\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;SelectorText\u0026#34;},{\u0026#34;delay\u0026#34;:0,\u0026#34;id\u0026#34;:\u0026#34;shop\u0026#34;,\u0026#34;multiple\u0026#34;:false,\u0026#34;parentSelectors\u0026#34;:[\u0026#34;name\u0026#34;],\u0026#34;regex\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;selector\u0026#34;:\u0026#34;.p-shop span a\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;SelectorText\u0026#34;}]} {\u0026#34;_id\u0026#34;:\u0026#34;tianmao\u0026#34;,\u0026#34;startUrl\u0026#34;:[\u0026#34;https://list.tmall.com/search_product.htm?spm=a220m.1000858.0.0.219b2a680geXJ0\u0026amp;s=120\u0026amp;q=%CA%D6%BB%FA\u0026amp;sort=s\u0026amp;style=g\u0026amp;from=mallfp..pc_1_searchbutton\u0026amp;active=1\u0026amp;type=pc#J_Filter\u0026#34;],\u0026#34;selectors\u0026#34;:[{\u0026#34;delay\u0026#34;:0,\u0026#34;id\u0026#34;:\u0026#34;sku\u0026#34;,\u0026#34;multiple\u0026#34;:true,\u0026#34;parentSelectors\u0026#34;:[\u0026#34;_root\u0026#34;],\u0026#34;selector\u0026#34;:\u0026#34;#J_ItemList .product\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;SelectorElement\u0026#34;},{\u0026#34;delay\u0026#34;:0,\u0026#34;id\u0026#34;:\u0026#34;name\u0026#34;,\u0026#34;multiple\u0026#34;:false,\u0026#34;parentSelectors\u0026#34;:[\u0026#34;sku\u0026#34;],\u0026#34;regex\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;selector\u0026#34;:\u0026#34;.productTitle a\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;SelectorText\u0026#34;},{\u0026#34;delay\u0026#34;:0,\u0026#34;id\u0026#34;:\u0026#34;price\u0026#34;,\u0026#34;multiple\u0026#34;:false,\u0026#34;parentSelectors\u0026#34;:[\u0026#34;sku\u0026#34;],\u0026#34;regex\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;selector\u0026#34;:\u0026#34;.productPrice em\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;SelectorText\u0026#34;},{\u0026#34;delay\u0026#34;:0,\u0026#34;id\u0026#34;:\u0026#34;shop\u0026#34;,\u0026#34;multiple\u0026#34;:false,\u0026#34;parentSelectors\u0026#34;:[\u0026#34;sku\u0026#34;],\u0026#34;regex\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;selector\u0026#34;:\u0026#34;a.productShop-name\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;SelectorText\u0026#34;},{\u0026#34;delay\u0026#34;:0,\u0026#34;id\u0026#34;:\u0026#34;sales\u0026#34;,\u0026#34;multiple\u0026#34;:false,\u0026#34;parentSelectors\u0026#34;:[\u0026#34;sku\u0026#34;],\u0026#34;regex\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;selector\u0026#34;:\u0026#34;span em\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;SelectorText\u0026#34;},{\u0026#34;delay\u0026#34;:0,\u0026#34;id\u0026#34;:\u0026#34;comments\u0026#34;,\u0026#34;multiple\u0026#34;:false,\u0026#34;parentSelectors\u0026#34;:[\u0026#34;sku\u0026#34;],\u0026#34;regex\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;selector\u0026#34;:\u0026#34;span a[data-p]\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;SelectorText\u0026#34;}]} chrome devtools var result = $x(\u0026#39;xpath\u0026#39;).map(function(i){return i.textContent} ); copy(result); "
},
{
	"uri": "/docker/cloudreve/",
	"title": "cloudreve 网盘",
	"tags": [],
	"description": "",
	"content": "# mkdir -vp cloudreve/{uploads,avatar} \\ \u0026amp;\u0026amp; touch cloudreve/conf.ini \\ \u0026amp;\u0026amp; touch cloudreve/cloudreve.db \\ \u0026amp;\u0026amp; mkdir -p aria2/config \\ \u0026amp;\u0026amp; mkdir -p data/aria2 \\ \u0026amp;\u0026amp; chmod -R 777 data/aria2 version: \u0026#34;3.8\u0026#34; services: cloudreve: container_name: cloudreve image: cloudreve/cloudreve:latest restart: unless-stopped ports: - \u0026#34;5212:5212\u0026#34; volumes: - ./data/aria2/downloads:/downloads - ./data/cloudreve/uploads:/cloudreve/uploads - ./data/cloudreve/conf.ini:/cloudreve/conf.ini - ./data/cloudreve/cloudreve.db:/cloudreve/cloudreve.db - ./data/cloudreve/avatar:/cloudreve/avatar depends_on: - Aria2-Pro Aria2-Pro: container_name: aria2-pro image: p3terx/aria2-pro environment: - PUID=65534 - PGID=65534 - UMASK_SET=022 - RPC_SECRET=0b5c74bcc83fc89f29b6f9f4e8a812ef87f69258 - RPC_PORT=6800 - LISTEN_PORT=6888 - DISK_CACHE=64M - IPV6_MODE=true - UPDATE_TRACKERS=true # - CUSTOM_TRACKER_URL= - TZ=Asia/Shanghai volumes: - ./data/aria2/config:/config - ./data/aria2/downloads:/downloads restart: unless-stopped # nginx config server { listen 15212 ssl http2; listen [::]:15212 ssl http2; server_name hjkl01.cn; ssl_certificate /etc/nginx/cert/hjkl01.cn_nginx/hjkl01.cn_bundle.crt; ssl_certificate_key /etc/nginx/cert/hjkl01.cn_nginx/hjkl01.cn.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_redirect off; client_max_body_size 90000m; location / { proxy_pass http://192.168.50.4:5212; } } "
},
{
	"uri": "/python/databases/",
	"title": "database",
	"tags": [],
	"description": "",
	"content": "sqlalchemy # pip install psycopg2-binary # sqlacodegen postgres://user:passwd@host:ip/database --outfile model.py from sqlalchemy import create_engine from sqlalchemy import Column, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker db_string = \u0026#34;postgres://admin:donotusethispassword@aws-us-east-1-portal.19.dblayer.com:15813/compose\u0026#34; db = create_engine(db_string) base = declarative_base() class Film(base): __tablename__ = \u0026#34;films\u0026#34; title = Column(String, primary_key=True) director = Column(String) year = Column(String) Session = sessionmaker(db) session = Session() base.metadata.create_all(db) # Create doctor_strange = Film(title=\u0026#34;Doctor Strange\u0026#34;, director=\u0026#34;Scott Derrickson\u0026#34;, year=\u0026#34;2016\u0026#34;) session.add(doctor_strange) session.commit() # Read films = session.query(Film) for film in films: print(film.title) # Update doctor_strange.title = \u0026#34;Some2016Film\u0026#34; session.commit() # Delete session.delete(doctor_strange) session.commit() delete_obj = Shop.__table__.delete().where(Shop.shop_cate.contains(\u0026#34;m\u0026#34;)) session.execute(delete_obj) session.commit() # from .base_model import Base from sqlalchemy.orm import sessionmaker, scoped_session from contextlib import contextmanager from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String, TIMESTAMP, text, JSON from sqlalchemy import create_engine Base = declarative_base() class PyOrmModel(Base): __tablename__ = \u0026#34;py_orm\u0026#34; id = Column(Integer, autoincrement=True, primary_key=True, comment=\u0026#34;唯一id\u0026#34;) name = Column(String(255), nullable=False, default=\u0026#34;\u0026#34;, comment=\u0026#34;名称\u0026#34;) attr = Column(JSON, nullable=False, comment=\u0026#34;属性\u0026#34;) ct = Column(TIMESTAMP, nullable=False, server_default=text(\u0026#34;CURRENT_TIMESTAMP\u0026#34;), comment=\u0026#34;创建时间\u0026#34;) ut = Column(TIMESTAMP, nullable=False, server_default=text(\u0026#34;CURRENT_TIMESTAMP\u0026#34;), comment=\u0026#34;更新时间\u0026#34;) @staticmethod def fields(): return [\u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;attr\u0026#34;] @staticmethod def to_json(model): fields = PyOrmModel.fields() json_data = {} for field in fields: json_data[field] = model.__getattribute__(field) return json_data @staticmethod def from_json(data: dict): fields = PyOrmModel.fields() model = PyOrmModel() for field in fields: if field in data: model.__setattr__(field, data[field]) return model db_url = \u0026#34;postgresql://user:password@ip:5432/db\u0026#34; engine = create_engine(db_url, echo=False) Base.metadata.create_all(engine) def _get_session(): \u0026#34;\u0026#34;\u0026#34;获取session\u0026#34;\u0026#34;\u0026#34; return scoped_session(sessionmaker(bind=engine, expire_on_commit=False))() # 在这里对session进行统一管理，包括获取，提交，回滚和关闭 @contextmanager def db_session(commit=True): session = _get_session() try: yield session if commit: session.commit() except Exception as e: session.rollback() raise e finally: if session: session.close() class PyOrmModelOp: def __init__(self): pass @staticmethod def save_data(data: dict): with db_session() as session: model = PyOrmModel.from_json(data) session.add(model) # 查询操作，不需要commit @staticmethod def query_data(pid: int): data_list = [] with db_session(commit=False) as session: data = session.query(PyOrmModel).filter(PyOrmModel.id == pid) for d in data: data_list.append(PyOrmModel.to_json(d)) return data_list for i in range(9): # PyOrmModelOp.save_data({\u0026#34;id\u0026#34;: i, \u0026#34;name\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;attr\u0026#34;: {}}) PyOrmModelOp.save_data({\u0026#34;name\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;attr\u0026#34;: {}}) result = PyOrmModelOp.query_data(i) print(result) # pip install \u0026#39;databases[aiomysql]\u0026#39; aiomysq import asyncio # Create a database instance, and connect to it. from databases import Database async def run(): db_url = \u0026#34;mysql://user:passwd@host:port/db\u0026#34; database = Database(db_url) # database = Database(\u0026#34;sqlite+aiosqlite:///example.db\u0026#34;) await database.connect() # Create a table. # query = \u0026#34;\u0026#34;\u0026#34;CREATE TABLE HighScores (id INTEGER PRIMARY KEY AUTO_INCREMENT, name VARCHAR(100), score INTEGER)\u0026#34;\u0026#34;\u0026#34; # await database.execute(query=query) # Insert some data. query = \u0026#34;INSERT INTO HighScores(name, score) VALUES (:name, :score)\u0026#34; values = [ {\u0026#34;name\u0026#34;: \u0026#34;Daisy\u0026#34;, \u0026#34;score\u0026#34;: 92}, {\u0026#34;name\u0026#34;: \u0026#34;Neil\u0026#34;, \u0026#34;score\u0026#34;: 87}, {\u0026#34;name\u0026#34;: \u0026#34;Carol\u0026#34;, \u0026#34;score\u0026#34;: 43}, ] await database.execute_many(query=query, values=values) # Run a database query. query = \u0026#34;SELECT * FROM HighScores\u0026#34; rows = await database.fetch_all(query=query) print(\u0026#34;High Scores:\u0026#34;, rows) for r in rows: print(r) return rows loop = asyncio.get_event_loop() loop.run_until_complete(run()) "
},
{
	"uri": "/docker/ddns/",
	"title": "ddns",
	"tags": [],
	"description": "",
	"content": "version: \u0026#39;3.1\u0026#39; services: ddns_go: image: jeessy/ddns-go restart: unless-stopped network_mode: \u0026#34;host\u0026#34; volumes: - ./data/ddns:/root # port: 9876 ddns: image: sanjusss/aliyun-ddns restart: always network_mode: \u0026#34;host\u0026#34; environment: # https://usercenter.console.aliyun.com/ AKID: AKSCT: DOMAIN: REDO: 30 TTL: 600 TIMEZONE: 8.0 TYPE: A,AAAA "
},
{
	"uri": "/python/django/",
	"title": "django",
	"tags": [],
	"description": "",
	"content": "import os import django from proxyip.models import ProxyIP os.environ[\u0026#39;DJANGO_SETTINGS_MODULE\u0026#39;] = \u0026#39;dj_project.settings\u0026#39; django.setup() p = ProxyIP(ip=\u0026#39;192.168.50.1\u0026#39;) p.save() print(ProxyIP.objects.all()) python manage.py shell \u0026lt; main.py python manage.py dumpdata (myapp) \u0026gt; myapp.json python manage.py loaddata myapp.json "
},
{
	"uri": "/docker/",
	"title": "docker",
	"tags": [],
	"description": "",
	"content": "install wget -qO- https://get.docker.com/ | sh sudo usermod -aG docker $USER # 修改源 \u0026#34; lang:sh %} # path: /etc/docker/daemon.json { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;http://hub-mirror.c.163.com\u0026#34;] } tools ctop lazydocker docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/.config/jesseduffield/lazydocker lazyteam/lazydocker portainer version: \u0026#39;3.1\u0026#39; services: portainer: image: portainer/portainer restart: always ports: - 8000:8000 - 9000:9000 volumes: - /var/run/docker.sock:/var/run/docker.sock - ./data/portainer:/data "
},
{
	"uri": "/python/fastapi/",
	"title": "fastapi",
	"tags": [],
	"description": "",
	"content": "from fastapi import FastAPI from pydantic import BaseModel app = FastAPI() # @app.get(\u0026#34;/\u0026#34;) async def read_root(): return {\u0026#34;Hello\u0026#34;: \u0026#34;World\u0026#34;} # @app.get(\u0026#34;/items/{item_id}\u0026#34;) async def read_item(item_id: int, q: str = None): return {\u0026#34;item_id\u0026#34;: item_id, \u0026#34;q\u0026#34;: q} class Item(BaseModel): name: str description: str = None price: float tax: float = None # @app.post(\u0026#34;/items/\u0026#34;) async def create_item(item: Item): return item app.add_api_route(\u0026#34;/\u0026#34;, read_root) app.add_api_route(\u0026#34;/item/{item_id}\u0026#34;, read_item) app.add_api_route(\u0026#34;/items/\u0026#34;, create_item, methods=[\u0026#39;POST\u0026#39;]) if __name__ == \u0026#39;__main__\u0026#39;: uvicorn.run(\u0026#39;main:app\u0026#39;, reload=True) # gunicorn test:app -w 4 -k uvicorn.workers.UvicornWorker "
},
{
	"uri": "/linux/git/",
	"title": "git &amp;&amp; ssh",
	"tags": [],
	"description": "",
	"content": "git config # generate public key git config --global user.name \u0026#34;\u0026#34; git config --global user.email \u0026#34;\u0026#34; ssh-keygen -t rsa -b 4096 -C \u0026#34;\u0026#34; # git config git config --global http.https://github.com.proxy socks5://127.0.0.1:1080 git config --global https.https://github.com.proxy socks5://127.0.0.1:1080 # or vi ~/.gitconfig [http \u0026#34;https://github.com\u0026#34;] proxy = socks5://127.0.0.1:1080 postBuffer = 524288000 [https \u0026#34;https://github.com\u0026#34;] proxy = socks5://127.0.0.1:1080 postBuffer = 524288000 # git submodule git submodule add https://github.com/liuyib/hexo-theme-stun/ themes/stun git submodule update --remote ssh config # $HOME/.ssh/config Host github HostName github.com User git # 走 HTTP 代理 # ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=8080 # 走 socks5 代理 ProxyCommand nc -v -x 127.0.0.1:1080 %h %p Host archServer HostName 192.168.xx.xx User xxx Port xxx # use ipv4 # AddressFamily inet IdentitiesOnly yes IdentityFile ~/.ssh/id_rsa ServerAliveInterval 120 # 转发跳板机端口 ssh -tt -i ./id_rsa -L 0.0.0.0:local_port:host2:host2_port user@host1 # 上传共钥到目标服务器 ssh-copy-id -i ~/.ssh/id_rsa.pub archServer # 转发服务器到本机的1082端口 ssh -D 1082 -f -C -q -N archServer "
},
{
	"uri": "/docker/gitea/",
	"title": "gitea",
	"tags": [],
	"description": "",
	"content": "# web管理界面里 默认端口3000和22不要改 # example: ssh://git@git.hjkl01.cn:58001/user/project.git version: \u0026#34;3\u0026#34; networks: gitea: external: false services: server: image: gitea/gitea:1.15.4 container_name: gitea environment: - USER_UID=1000 - USER_GID=1000 - DB_TYPE=postgres - DB_HOST=db:5432 - DB_NAME=gitea - DB_USER=username - DB_PASSWD=password restart: always networks: - gitea volumes: - ./data/gitea/data:/data ports: - \u0026#34;58000:3000\u0026#34; - \u0026#34;58001:22\u0026#34; depends_on: - db db: image: postgres:13-alpine restart: always environment: - POSTGRES_USER=username - POSTGRES_PASSWORD=password - POSTGRES_DB=gitea networks: - gitea volumes: - ./data/gitea/postgres:/var/lib/postgresql/data "
},
{
	"uri": "/docker/gops/",
	"title": "gops",
	"tags": [],
	"description": "",
	"content": "version: \u0026#39;3\u0026#39; services: db: image: postgres:11-alpine restart: unless-stopped environment: POSTGRES_USER: \u0026#39;gogs\u0026#39; POSTGRES_PASSWORD: \u0026#39;gogs\u0026#39; POSTGRES_DB: \u0026#39;postgres\u0026#39; ports: - \u0026#34;5432:5432\u0026#34; networks: - gogs_net volumes: - ./data/postgres_data:/var/lib/postgresql/data gogs: image: gogs/gogs:latest networks: - gogs_net depends_on: - db links: - db ports: - \u0026#34;10022:22\u0026#34; - \u0026#34;10080:3000\u0026#34; restart: unless-stopped volumes: - ./data/gogs_data:/data:rw networks: gogs_net: driver: bridge "
},
{
	"uri": "/python/jupyter/",
	"title": "jupyter",
	"tags": [],
	"description": "",
	"content": "# jupyter config pip install jupyter jupyter notebook --generate-config # ipython from notebook.auth import passwd passwd() # or jupyter notebook password vim ~/.jupyter/jupyter_notebook_config.py c.NotebookApp.ip=\u0026#39;*\u0026#39; c.NotebookApp.password = u\u0026#39;\u0026#39; c.NotebookApp.open_browser = False c.NotebookApp.port = 8000 jupyter notebook import os import re import secrets import yaml from rich import print class ConfigMeta: def __init__(self, _file=\u0026#34;config.yaml\u0026#34;): self.file = _file def __getattr__(self, key): with open(self.file, \u0026#34;r\u0026#34;) as file: self.con = yaml.safe_load(file) result = self.con.get(key) return result Config = ConfigMeta() def generate_password(): result = [] for i in range(1, 9): temp = {} temp[\u0026#34;port\u0026#34;] = 9120 + i temp[\u0026#34;dirname\u0026#34;] = f\u0026#34;njrd_venv_{9120+i}\u0026#34; temp[\u0026#34;password\u0026#34;] = secrets.token_urlsafe(32) result.append(temp) with open(\u0026#34;config.yaml\u0026#34;, \u0026#34;w\u0026#34;) as file: yaml.dump({\u0026#34;config\u0026#34;: result}, file, allow_unicode=True) def stop_old_jupyter(): cmd = \u0026#34;ps aux | grep jupyter\u0026#34; temp = os.popen(cmd) for t in temp: print(t) ppid = re.findall(\u0026#34;\\d+\u0026#34;, t)[0] cmd = f\u0026#34;kill -9 {ppid}\u0026#34; print(cmd) os.system(cmd) def main(): print(Config.config) for con in Config.config: dirname = con[\u0026#34;dirname\u0026#34;] port = con[\u0026#34;port\u0026#34;] password = con[\u0026#34;password\u0026#34;] if os.path.exists(f\u0026#34;./{dirname}\u0026#34;): print(f\u0026#34;exists {dirname}\u0026#34;) else: cmds = [ f\u0026#34;/usr/bin/python3.6 -m venv {dirname}/.venv\u0026#34;, f\u0026#34;{dirname}/.venv/bin/pip install --upgrade pip\u0026#34;, f\u0026#34;{dirname}/.venv/bin/pip install jupyter \u0026#34;, ] for cmd in cmds: print(cmd) os.system(cmd) cmd = f\u0026#34;source {dirname}/.venv/bin/activate \u0026amp;\u0026amp; nohup {dirname}/.venv/bin/jupyter notebook --ip=\u0026#39;*\u0026#39; --port=\u0026#39;{port}\u0026#39; --notebook-dir=\u0026#39;{dirname}\u0026#39; --NotebookApp.token=\u0026#39;{password}\u0026#39; --NotebookApp.password=\u0026#39;{password}\u0026#39; \u0026gt;\u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp; \u0026#34; print(cmd) os.system(cmd) return if __name__ == \u0026#34;__main__\u0026#34;: # generate_password() stop_old_jupyter() main() "
},
{
	"uri": "/linux/",
	"title": "Linux",
	"tags": [],
	"description": "",
	"content": "我的Oh My zsh + nvim 配置 https://github.com/hjkl01/dotfiles neovim config with lua https://github.com/hjkl01/init.lua "
},
{
	"uri": "/mac/",
	"title": "Mac",
	"tags": [],
	"description": "",
	"content": "刷新DNS sudo dscacheutil -flushcache Mac终端录屏 # https://github.com/icholy/ttygif brew install ttygif ttyrec myrecording # On OSX optionally you can set a -f flag which will bypass cropping which is needed for terminal apps which aren\u0026#39;t full screen. Both standard Terminal and iTerm apps are supported. ttygif myrecording -f 在touch bar 上显示歌词-LyricsX https://github.com/ddddxxx/LyricsX\n# mtmr 配置 [{ \u0026#34;type\u0026#34;: \u0026#34;dnd\u0026#34;, \u0026#34;align\u0026#34;: \u0026#34;left\u0026#34;, \u0026#34;width\u0026#34;: 38 }, { \u0026#34;type\u0026#34;: \u0026#34;brightnessDown\u0026#34;, \u0026#34;width\u0026#34;: 32, \u0026#34;bordered\u0026#34;: false, \u0026#34;align\u0026#34;: \u0026#34;left\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;brightnessUp\u0026#34;, \u0026#34;width\u0026#34;: 32, \u0026#34;bordered\u0026#34;: false, \u0026#34;align\u0026#34;: \u0026#34;left\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;dock\u0026#34;, \u0026#34;align\u0026#34;: \u0026#34;left\u0026#34;, \u0026#34;width\u0026#34;: 420 }, { \u0026#34;type\u0026#34;: \u0026#34;group\u0026#34;, \u0026#34;align\u0026#34;: \u0026#34;right\u0026#34;, \u0026#34;bordered\u0026#34;: false, \u0026#34;title\u0026#34;: \u0026#34;Media\u0026#34;, \u0026#34;items\u0026#34;: [{ \u0026#34;type\u0026#34;: \u0026#34;close\u0026#34;, \u0026#34;bordered\u0026#34;: false, \u0026#34;align\u0026#34;: \u0026#34;left\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;brightnessDown\u0026#34;, \u0026#34;bordered\u0026#34;: false, \u0026#34;align\u0026#34;: \u0026#34;left\u0026#34;, \u0026#34;width\u0026#34;: 36 }, { \u0026#34;type\u0026#34;: \u0026#34;brightness\u0026#34;, \u0026#34;width\u0026#34;: 200, \u0026#34;align\u0026#34;: \u0026#34;left\u0026#34;, \u0026#34;image\u0026#34;: { \u0026#34;base64\u0026#34;: \u0026#34;iVBORw0KGgoAAAANSUhEUgAAAIAAAACAAQMAAAD58POIAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAGUExURffLOPfLNyaSVzUAAAACdFJOU/kBxOqnWgAAAbJJREFUSMfVljtyhDAQBVulQCFH4CgcDR1NR9ERFBKoeA5GfGddtkNvwFINFKP5tED22+Zxwviv6QVKfIEc/iNoF5gkpLIeYI8SUp4PsAUJiekADQntF6isQjvxCTrhAJlFqMMBeIH9BMsD7DAb2BhvYbIyNAOCZIWqYKGTpDZJFQu9EKVd44RxQRq3IrULWD62C8wSssWUZEsR0k6wcDOrJZmoBpMKI+s5qkBQCQOUJADVOECdOsDS0gDbsgHMfT4rVwHSrZQFIN5ABka8BgDgAeZ+BztBgvUEnSgVlhNsTFJjvoF5HAZorBpdYKAiSRbqNyBIUr6AjZMdPwO72R40MElS+wZUWA+wQ6LAYkFvdIhkmA+wQSDDdIAGAZ6A34H0x0fca11gBZZsIHSIfnE/5+NjCn/OuiuUB+/aunZwDeNayjXdTpDN0wlY+r1PfWu75nfj8RogN2JuCN2Y5qgMwTI0wGPUnQw6Qarx0sVNKA5Mn6VUL22lIbZoYitDbPmlvocc9Umfl2D7adz1reC3pF8av4m+DCenp/ndZuG3E7fhuC3pH2+vnz8V3MfE+bnxBTXuuIMTrLWHAAAAAElFTkSuQmCC\u0026#34; } }, { \u0026#34;type\u0026#34;: \u0026#34;brightnessUp\u0026#34;, \u0026#34;bordered\u0026#34;: false, \u0026#34;align\u0026#34;: \u0026#34;left\u0026#34;, \u0026#34;width\u0026#34;: 36 }, { \u0026#34;type\u0026#34;: \u0026#34;volumeDown\u0026#34;, \u0026#34;bordered\u0026#34;: false, \u0026#34;align\u0026#34;: \u0026#34;left\u0026#34;, \u0026#34;width\u0026#34;: 36 }, { \u0026#34;type\u0026#34;: \u0026#34;volume\u0026#34;, \u0026#34;width\u0026#34;: 200, \u0026#34;align\u0026#34;: \u0026#34;left\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;volumeUp\u0026#34;, \u0026#34;bordered\u0026#34;: false, \u0026#34;align\u0026#34;: \u0026#34;left\u0026#34;, \u0026#34;width\u0026#34;: 36 }, { \u0026#34;type\u0026#34;: \u0026#34;previous\u0026#34;, \u0026#34;bordered\u0026#34;: false, \u0026#34;align\u0026#34;: \u0026#34;center\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;play\u0026#34;, \u0026#34;bordered\u0026#34;: false, \u0026#34;align\u0026#34;: \u0026#34;center\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;next\u0026#34;, \u0026#34;bordered\u0026#34;: false, \u0026#34;align\u0026#34;: \u0026#34;center\u0026#34; } ] }, { \u0026#34;type\u0026#34;: \u0026#34;displaySleep\u0026#34;, \u0026#34;width\u0026#34;: 20, \u0026#34;align\u0026#34;: \u0026#34;right\u0026#34;, \u0026#34;bordered\u0026#34;: false }, { \u0026#34;type\u0026#34;: \u0026#34;weather\u0026#34;, \u0026#34;align\u0026#34;: \u0026#34;right\u0026#34;, \u0026#34;icon_type\u0026#34;: \u0026#34;images\u0026#34;, \u0026#34;api_key\u0026#34;: \u0026#34;ca93a0bb8cdb428552660d83249e4bc9\u0026#34;, \u0026#34;bordered\u0026#34;: false }, { \u0026#34;type\u0026#34;: \u0026#34;play\u0026#34;, \u0026#34;align\u0026#34;: \u0026#34;right\u0026#34;, \u0026#34;width\u0026#34;: 38 }, // { // \u0026#34;type\u0026#34;: \u0026#34;volumeDown\u0026#34;, // \u0026#34;bordered\u0026#34;: false, // \u0026#34;align\u0026#34;: \u0026#34;right\u0026#34;, // \u0026#34;width\u0026#34;: 28 // }, // { // \u0026#34;type\u0026#34;: \u0026#34;volumeUp\u0026#34;, // \u0026#34;bordered\u0026#34;: false, // \u0026#34;align\u0026#34;: \u0026#34;right\u0026#34;, // \u0026#34;width\u0026#34;: 28 // }, { \u0026#34;type\u0026#34;: \u0026#34;mute\u0026#34;, \u0026#34;bordered\u0026#34;: false, \u0026#34;align\u0026#34;: \u0026#34;right\u0026#34; }, // { // \u0026#34;type\u0026#34;: \u0026#34;battery\u0026#34;, // \u0026#34;align\u0026#34;: \u0026#34;right\u0026#34;, // \u0026#34;bordered\u0026#34;: false // }, // { // \u0026#34;type\u0026#34;: \u0026#34;timeButton\u0026#34;, // \u0026#34;formatTemplate\u0026#34;: \u0026#34;HH:mm\u0026#34;, // \u0026#34;align\u0026#34;: \u0026#34;right\u0026#34;, // \u0026#34;bordered\u0026#34;: false, // \u0026#34;longAction\u0026#34;: \u0026#34;shellScript\u0026#34;, // \u0026#34;longExecutablePath\u0026#34;: \u0026#34;/usr/bin/pmset\u0026#34;, // \u0026#34;longShellArguments\u0026#34;: [\u0026#34;sleepnow\u0026#34;] // } ] "
},
{
	"uri": "/python/mitmproxy/",
	"title": "mitmproxy",
	"tags": [],
	"description": "",
	"content": "# install pip install mitmproxy # open mitm.it after set proxy mitmproxy --http2 --listen-host 0.0.0.0 --listen-port 8888 -s mitm_test.py # http.HTTPFlow 实例 flow flow.request.headers #获取所有头信息，包含Host、User-Agent、Content-type等字段 flow.request.url #完整的请求地址，包含域名及请求参数，但是不包含放在body里面的请求参数 flow.request.pretty_url #同flow.request.url目前没看出什么差别 flow.request.host #域名 flow.request.method #请求方式。POST、GET等 flow.request.scheme #什么请求 ，如https flow.request.path # 请求的路径，url除域名之外的内容 flow.request.get_text() #请求中body内容，有一些http会把请求参数放在body里面，那么可通过此方法获取，返回字典类型 flow.request.query #返回MultiDictView类型的数据，url直接带的键值参数 flow.request.get_content()#bytes,结果如flow.request.get_text() flow.request.raw_content #bytes,结果如flow.request.get_content() flow.request.urlencoded_form #MultiDictView，content-type：application/x-www-form-urlencoded时的请求参数，不包含url直接带的键值参数 flow.request.multipart_form #MultiDictView，content-type：multipart/form-data 时的请求参数，不包含url直接带的键值参数 以上均为获取request信息的一些常用方法，对于response，同理 flow.response.status_code #状态码 flow.response.text#返回内容，已解码 flow.response.content #返回内容，二进制 flow.response.setText()#修改返回内容，不需要转码 # example def response(flow): if \u0026#34;some url\u0026#34; in flow.request.url: print(\u0026#34;[*] Request: {}\u0026#34;.format(flow.request.url)) print(\u0026#34;[*] Response: {}\u0026#34;.format(flow.response.text)) "
},
{
	"uri": "/python/mongo/",
	"title": "mongo",
	"tags": [],
	"description": "",
	"content": "# MongoDB 语法 db.users.find({ create_at: { $exists: true } }) db.users.find() select * from users db.users.find({\u0026#34;age\u0026#34; : 27}) select * from users where age = 27 db.users.find({\u0026#34;username\u0026#34; : \u0026#34;joe\u0026#34;, \u0026#34;age\u0026#34; : 27}) select * from users where \u0026#34;username\u0026#34; = \u0026#34;joe\u0026#34; and age = 27 db.users.find({}, {\u0026#34;username\u0026#34; : 1, \u0026#34;email\u0026#34; : 1}) select username, email from users db.users.find({}, {\u0026#34;username\u0026#34; : 1, \u0026#34;_id\u0026#34; : 0}) // no case // 即时加上了列筛选，_id也会返回；必须显式的阻止_id返回 db.users.find({\u0026#34;age\u0026#34; : {\u0026#34;$gte\u0026#34; : 18, \u0026#34;$lte\u0026#34; : 30}}) select * from users where age \u0026gt;=18 and age \u0026lt;= 30 // $lt(\u0026lt;) $lte(\u0026lt;=) $gt(\u0026gt;) $gte(\u0026gt;=) db.users.find({\u0026#34;username\u0026#34; : {\u0026#34;$ne\u0026#34; : \u0026#34;joe\u0026#34;}}) select * from users where username \u0026lt;\u0026gt; \u0026#34;joe\u0026#34; db.users.find({\u0026#34;ticket_no\u0026#34; : {\u0026#34;$in\u0026#34; : [725, 542, 390]}}) select * from users where ticket_no in (725, 542, 390) db.users.find({\u0026#34;ticket_no\u0026#34; : {\u0026#34;$nin\u0026#34; : [725, 542, 390]}}) select * from users where ticket_no not in (725, 542, 390) db.users.find({\u0026#34;$or\u0026#34; : [{\u0026#34;ticket_no\u0026#34; : 725}, {\u0026#34;winner\u0026#34; : true}]}) select * form users where ticket_no = 725 or winner = true db.users.find({\u0026#34;id_num\u0026#34; : {\u0026#34;$mod\u0026#34; : [5, 1]}}) select * from users where (id_num mod 5) = 1 db.users.find({\u0026#34;$not\u0026#34;: {\u0026#34;age\u0026#34; : 27}}) select * from users where not (age = 27) db.users.find({\u0026#34;username\u0026#34; : {\u0026#34;$in\u0026#34; : [null], \u0026#34;$exists\u0026#34; : true}}) select * from users where username is null // 如果直接通过find({\u0026#34;username\u0026#34; : null})进行查询，那么连带\u0026#34;没有username\u0026#34;的纪录一并筛选出来 db.users.find({\u0026#34;name\u0026#34; : /joey?/i}) // 正则查询，value是符合PCRE的表达式 db.food.find({fruit : {$all : [\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;]}}) // 对数组的查询, 字段fruit中，既包含\u0026#34;apple\u0026#34;,又包含\u0026#34;banana\u0026#34;的纪录 db.food.find({\u0026#34;fruit.2\u0026#34; : \u0026#34;peach\u0026#34;}) // 对数组的查询, 字段fruit中，第3个(从0开始)元素是peach的纪录 db.food.find({\u0026#34;fruit\u0026#34; : {\u0026#34;$size\u0026#34; : 3}}) // 对数组的查询, 查询数组元素个数是3的记录，$size前面无法和其他的操作符复合使用 db.users.findOne(criteria, {\u0026#34;comments\u0026#34; : {\u0026#34;$slice\u0026#34; : 10}}) // 对数组的查询，只返回数组comments中的前十条，还可以{\u0026#34;$slice\u0026#34; : -10}， {\u0026#34;$slice\u0026#34; : [23, 10]}; 分别返回最后10条，和中间10条 db.people.find({\u0026#34;name.first\u0026#34; : \u0026#34;Joe\u0026#34;, \u0026#34;name.last\u0026#34; : \u0026#34;Schmoe\u0026#34;}) // 嵌套查询 db.blog.find({\u0026#34;comments\u0026#34; : {\u0026#34;$elemMatch\u0026#34; : {\u0026#34;author\u0026#34; : \u0026#34;joe\u0026#34;, \u0026#34;score\u0026#34; : {\u0026#34;$gte\u0026#34; : 5}}}}) // 嵌套查询，仅当嵌套的元素是数组时使用, db.foo.find({\u0026#34;$where\u0026#34; : \u0026#34;this.x + this.y == 10\u0026#34;}) // 复杂的查询，$where当然是非常方便的，但效率低下。对于复杂查询，考虑的顺序应当是 正则 -\u0026gt; MapReduce -\u0026gt; $where db.foo.find({\u0026#34;$where\u0026#34; : \u0026#34;function() { return this.x + this.y == 10; }\u0026#34;}) // $where可以支持javascript函数作为查询条件 db.foo.find().sort({\u0026#34;x\u0026#34; : 1}).limit(1).skip(10); // 返回第(10, 11]条，按\u0026#34;x\u0026#34;进行排序; 三个limit的顺序是任意的，应该尽量避免skip中使用large-number # Mac上导出MongoDB数据 # Mac install mongo tools brew tap mongodb/brew brew install mongodb-database-tools # in arch: yay -S --noconfirm mongodb-tools-bin ## export mongoexport --host 127.0.0.1:27017 -u user -p passwd --authenticationDatabase admin --db dbname -c cname --forceTableScan -o res.json mongoexport --uri=mongodb://username:password@host:27017/ --authenticationDatabase=admin -d db -c collection -o result.json ## import mongoimport --uri=mongodb://username:password@host:27017/ --authenticationDatabase=admin -d db -c collection --file=result.json # Python 调用 MongoDB import pymongo def connect_mongo(uri, db, tablename): myclient = pymongo.MongoClient(uri) mydb = myclient[db] mycol = mydb[tablename] return mycol, myclient class MongoAPI: def __init__(self, db=\u0026#34;db\u0026#34;, tablename=\u0026#34;tablename\u0026#34;): self.uri = “mongodb://user:password@host:27017/” self.myclient = pymongo.MongoClient(self.uri) mydb = self.myclient[db] self.mycol = mydb[tablename] # values = {\u0026#34;abr\u0026#34;: 1} def query(self, myquery={\u0026#34;name\u0026#34;: \u0026#34;somename\u0026#34;}, values=None, _limit=10): if _limit: result = [q for q in self.mycol.find(query, values).limit(_limit)] else: result = [q for q in self.mycol.find(query, values)] return result def save(self, data): try: self.mycol.insert_one(data) return True except Exception as err: if \u0026#34;duplicate key error collection\u0026#34; in str(err): print(\u0026#34;saved \u0026#34;, data[\u0026#34;_id\u0026#34;]) else: print(err) return False # myquery = {\u0026#34;asin\u0026#34;: \u0026#34;B07K36J4VP\u0026#34;} # myquery = { \u0026#34;name\u0026#34;: { \u0026#34;$regex\u0026#34;: \u0026#34;^F\u0026#34; } } # newvalues = {\u0026#34;$set\u0026#34;: {\u0026#34;comments\u0026#34;: \u0026#34;values\u0026#34;}} def update(self, myquery, newvalues): self.mycol.update_one(myquery, newvalues, upsert=False) logger.info(f\u0026#34;update success {myquery}\u0026#34;) return True def quit(self): self.myclient.close() "
},
{
	"uri": "/docker/mongo/",
	"title": "mongoDB",
	"tags": [],
	"description": "",
	"content": "# .env MONGO_ROOT_USER=username MONGO_ROOT_PASSWORD=password MONGODB_URL=mongodb://username:password@mongo:27017 version: \u0026#39;3.1\u0026#39; services: mongo: image: mongo restart: always ports: - 27017:27017 environment: - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER} - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD} volumes: - ./data/mongo:/data/db mongo-express: image: mongo-express restart: always ports: - 8081:8081 links: - mongo environment: - ME_CONFIG_MONGODB_URL=${MONGODB_URL} - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_ROOT_USER} - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_ROOT_PASSWORD} "
},
{
	"uri": "/python/multiprocessing/",
	"title": "multiprocessing",
	"tags": [],
	"description": "",
	"content": "import multiprocessing def f(msg): print(msg) return multiprocessing.current_process().name + \u0026#39;-\u0026#39; + msg def func1(): pool = multiprocessing.Pool(processes=multiprocessing.cpu_count()) results = [] for i in range(10): msg = \u0026#34;hello %d\u0026#34; % (i) results.append(pool.apply_async(f, (msg, ))) pool.close() pool.join() print(\u0026#34;Sub-process(es) done.\u0026#34;) for res in results: print(res.get()) def func2(): from multiprocessing import Pool # with Pool(5) as p: with Pool(processes=multiprocessing.cpu_count()) as p: print(p.map(f, [str(i) for i in range(9)])) if __name__ == \u0026#34;__main__\u0026#34;: # func1() func2() "
},
{
	"uri": "/docker/mysql/",
	"title": "mysql",
	"tags": [],
	"description": "",
	"content": "version: \u0026#39;3.1\u0026#39; services: db: # We use a mariadb image which supports both amd64 \u0026amp; arm64 architecture image: mariadb:10.6.4-focal # If you really want to use MySQL, uncomment the following line #image: mysql:8.0.27 command: \u0026#39;--default-authentication-plugin=mysql_native_password\u0026#39; volumes: - ./data/mysql:/var/lib/mysql restart: always environment: - MYSQL_ROOT_PASSWORD=password - MYSQL_DATABASE=data - MYSQL_USER=user - MYSQL_PASSWORD=password - MYSQL_ROOT_HOST=% ports: - 3306:3306 # linux配置 /etc/mysql/my.cnf: [client] default-character-set = utf8 [mysqld] default-storage-engine = INNODB character-set-server = utf8 collation-server = utf8_general_ci # others protected-mode yes mysqldump -u root -p --all-databases \u0026gt; data.txt source data.txt create database testdb default charset utf8 COLLATE utf8_general_ci; http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#pwiz-a-model-generator "
},
{
	"uri": "/linux/neovim/",
	"title": "neovim",
	"tags": [],
	"description": "",
	"content": "我的neovim配置 https://github.com/hjkl01/init.vim\n插件 # status/tabline vim-airline/vim-airline Plug \u0026#39;vim-airline/vim-airline\u0026#39; Plug \u0026#39;vim-airline/vim-airline-themes\u0026#39; let g:airline#extensions#tabline#formatter = \u0026#39;default\u0026#39; let g:airline#extensions#tabline#enabled = 1 \u0026#34; let g:airline#extensions#tabline#left_sep = \u0026#39; \u0026#39; \u0026#34; let g:airline#extensions#tabline#left_alt_sep = \u0026#39;|\u0026#39; \u0026#34; let g:airline#extensions#tabline#enabled = 1 \u0026#34; let g:airline#extensions#tabline#tab_nr_type = 1 \u0026#34; tab number \u0026#34; let g:airline#extensions#tabline#show_tab_nr = 1 \u0026#34; let g:airline#extensions#tabline#formatter = \u0026#39;default\u0026#39; \u0026#34; let g:airline#extensions#tabline#buffer_nr_show = 0 \u0026#34; let g:airline#extensions#tabline#fnametruncate = 16 \u0026#34; let g:airline#extensions#tabline#fnamecollapse = 2 \u0026#34; let g:airline#extensions#tabline#buffer_idx_mode = 1 let g:airline_theme=\u0026#39;molokai\u0026#39; # format file Plug \u0026#39;Chiel92/vim-autoformat\u0026#39; \u0026#34; autocmd BufWrite * :Autoformat let g:autoformat_autoindent = 1 let g:autoformat_retab = 1 let g:autoformat_remove_trailing_spaces = 1 # 文件目录 Plug \u0026#39;preservim/nerdtree\u0026#39; let g:NERDTreeWinPos = \u0026#34;right\u0026#34; let NERDTreeShowHidden=1 let NERDTreeShowLineNumbers=1 let NERDTreeIgnore = [\u0026#39;\\.pyc$\u0026#39;, \u0026#39;__pycache__\u0026#39;] let g:NERDTreeWinSize=35 let g:NERDTreeDirArrows = 1 \u0026#34;当打开vim且没有文件时自动打开NERDTree \u0026#34; autocmd vimenter * if !argc() | NERDTree | endif \u0026#34;\u0026#34; 只剩 NERDTree时自动关闭 autocmd bufenter * if (winnr(\u0026#34;$\u0026#34;) == 1 \u0026amp;\u0026amp; exists(\u0026#34;b:NERDTree\u0026#34;) \u0026amp;\u0026amp; b:NERDTree.isTabTree()) | q | endif nmap \u0026lt;Space\u0026gt;n :NERDTreeToggle\u0026lt;CR\u0026gt; nmap \u0026lt;Space\u0026gt;n \u0026lt;ESC\u0026gt; :NERDTreeToggle\u0026lt;CR\u0026gt; # nvim-tree.lua Plug \u0026#39;kyazdani42/nvim-web-devicons\u0026#39; \u0026#34; for file icons Plug \u0026#39;kyazdani42/nvim-tree.lua\u0026#39; autocmd BufEnter * ++nested if winnr(\u0026#39;$\u0026#39;) == 1 \u0026amp;\u0026amp; bufname() == \u0026#39;NvimTree_\u0026#39; . tabpagenr() | quit | endif nnoremap \u0026lt;Space\u0026gt;n :NvimTreeToggle\u0026lt;CR\u0026gt; lua \u0026lt;\u0026lt; EOF require\u0026#39;nvim-tree\u0026#39;.setup { -- BEGIN_DEFAULT_OPTS auto_reload_on_write = true, disable_netrw = false, hide_root_folder = false, hijack_cursor = false, hijack_netrw = true, hijack_unnamed_buffer_when_opening = false, ignore_buffer_on_setup = false, open_on_setup = true, -- open_on_setup_file = true, open_on_tab = true, sort_by = \u0026#34;name\u0026#34;, update_cwd = false, view = { width = 30, height = 30, side = \u0026#34;right\u0026#34;, preserve_window_proportions = false, number = true, relativenumber = true, signcolumn = \u0026#34;yes\u0026#34;, mappings = { custom_only = false, list = { -- user mappings go here }, }, }, renderer = { indent_markers = { enable = true, icons = { corner = \u0026#34;└ \u0026#34;, edge = \u0026#34;│ \u0026#34;, none = \u0026#34; \u0026#34;, }, }, }, hijack_directories = { enable = true, auto_open = true, }, update_focused_file = { enable = false, update_cwd = false, ignore_list = {}, }, ignore_ft_on_setup = {}, system_open = { cmd = nil, args = {}, }, diagnostics = { enable = false, show_on_dirs = false, icons = { hint = \u0026#34;\u0026#34;, info = \u0026#34;\u0026#34;, warning = \u0026#34;\u0026#34;, error = \u0026#34;\u0026#34;, }, }, filters = { dotfiles = false, custom = {}, exclude = {}, }, git = { enable = true, ignore = true, timeout = 400, }, actions = { use_system_clipboard = true, change_dir = { enable = true, global = false, }, open_file = { quit_on_open = true, resize_window = true, window_picker = { enable = true, chars = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\u0026#34;, exclude = { filetype = { \u0026#34;notify\u0026#34;, \u0026#34;packer\u0026#34;, \u0026#34;qf\u0026#34;, \u0026#34;diff\u0026#34;, \u0026#34;fugitive\u0026#34;, \u0026#34;fugitiveblame\u0026#34; }, buftype = { \u0026#34;nofile\u0026#34;, \u0026#34;terminal\u0026#34;, \u0026#34;help\u0026#34; }, }, }, }, }, trash = { cmd = \u0026#34;trash\u0026#34;, require_confirm = true, }, log = { enable = false, truncate = false, types = { all = false, config = false, copy_paste = false, git = false, profile = false, }, }, } EOF # 注释 Plug \u0026#39;preservim/nerdcommenter\u0026#39; \u0026#34; 注释 nmap \u0026lt;Space\u0026gt;\u0026lt;Space\u0026gt; \u0026lt;plug\u0026gt;NERDCommenterToggle \u0026#34; Add spaces after comment delimiters by default let g:NERDSpaceDelims = 1 \u0026#34; Use compact syntax for prettified multi-line comments let g:NERDCompactSexyComs = 1 \u0026#34; Align line-wise comment delimiters flush left instead of following code indentation let g:NERDDefaultAlign = \u0026#39;left\u0026#39; \u0026#34; Set a language to use its alternate delimiters by default let g:NERDAltDelims_java = 1 \u0026#34; Add your own custom formats or override the defaults \u0026#34; let g:NERDCustomDelimiters = { \u0026#39;c\u0026#39;: { \u0026#39;left\u0026#39;: \u0026#39;/**\u0026#39;,\u0026#39;right\u0026#39;: \u0026#39;*/\u0026#39; } } \u0026#34; Allow commenting and inverting empty lines (useful when commenting a region) let g:NERDCommentEmptyLines = 1 \u0026#34; Enable trimming of trailing whitespace when uncommenting let g:NERDTrimTrailingWhitespace = 1 \u0026#34; Enable NERDCommenterToggle to check all selected lines is commented or not let g:NERDToggleCheckAllLines = 1 # other Plug \u0026#39;jiangmiao/auto-pairs\u0026#39; Plug \u0026#39;nvim-lua/plenary.nvim\u0026#39; Plug \u0026#39;nvim-telescope/telescope.nvim\u0026#39; nnoremap \u0026lt;S-f\u0026gt; \u0026lt;cmd\u0026gt;Telescope find_files\u0026lt;cr\u0026gt; Plug \u0026#39;mhinz/vim-startify\u0026#39; Plug \u0026#39;ntpeters/vim-better-whitespace\u0026#39; Plug \u0026#39;pechorin/any-jump.vim\u0026#39; \u0026#34; Normal mode: Jump to definition under cursor nnoremap \u0026lt;leader\u0026gt;j :AnyJump\u0026lt;CR\u0026gt; \u0026#34; Visual mode: jump to selected text in visual mode xnoremap \u0026lt;leader\u0026gt;j :AnyJumpVisual\u0026lt;CR\u0026gt; \u0026#34; Normal mode: open previous opened file (after jump) nnoremap \u0026lt;leader\u0026gt;ab :AnyJumpBack\u0026lt;CR\u0026gt; \u0026#34; Normal mode: open last closed search window again nnoremap \u0026lt;leader\u0026gt;al :AnyJumpLastResults\u0026lt;CR\u0026gt; Plug \u0026#39;voldikss/vim-floaterm\u0026#39; nmap \u0026lt;Space\u0026gt;t :FloatermNew\u0026lt;CR\u0026gt; Plug \u0026#39;dense-analysis/ale\u0026#39; let b:ale_linters = [\u0026#39;mypy\u0026#39;] \u0026#34; let b:ale_linters = [\u0026#39;flake8\u0026#39;, \u0026#39;pylint\u0026#39;] Plug \u0026#39;gelguy/wilder.nvim\u0026#39;, { \u0026#39;do\u0026#39;: \u0026#39;:UpdateRemotePlugins\u0026#39; } call wilder#setup({\u0026#39;modes\u0026#39;: [\u0026#39;:\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;?\u0026#39;]}) call wilder#set_option(\u0026#39;pipeline\u0026#39;, [ \\ wilder#branch( \\ wilder#cmdline_pipeline(), \\ wilder#search_pipeline(), \\ ), \\ ]) call wilder#set_option(\u0026#39;renderer\u0026#39;, wilder#wildmenu_renderer({ \\ \u0026#39;highlighter\u0026#39;: wilder#basic_highlighter(), \\ })) # code complete: lsp Plug \u0026#39;prabirshrestha/vim-lsp\u0026#39; Plug \u0026#39;mattn/vim-lsp-settings\u0026#39; Plug \u0026#39;prabirshrestha/asyncomplete.vim\u0026#39; Plug \u0026#39;prabirshrestha/asyncomplete-lsp.vim\u0026#39; function! s:on_lsp_buffer_enabled() abort setlocal omnifunc=lsp#complete setlocal signcolumn=yes if exists(\u0026#39;+tagfunc\u0026#39;) | setlocal tagfunc=lsp#tagfunc | endif nmap \u0026lt;buffer\u0026gt; gd \u0026lt;plug\u0026gt;(lsp-definition) nmap \u0026lt;buffer\u0026gt; gs \u0026lt;plug\u0026gt;(lsp-document-symbol-search) nmap \u0026lt;buffer\u0026gt; gS \u0026lt;plug\u0026gt;(lsp-workspace-symbol-search) nmap \u0026lt;buffer\u0026gt; gr \u0026lt;plug\u0026gt;(lsp-references) nmap \u0026lt;buffer\u0026gt; gi \u0026lt;plug\u0026gt;(lsp-implementation) nmap \u0026lt;buffer\u0026gt; gt \u0026lt;plug\u0026gt;(lsp-type-definition) nmap \u0026lt;buffer\u0026gt; \u0026lt;leader\u0026gt;rn \u0026lt;plug\u0026gt;(lsp-rename) nmap \u0026lt;buffer\u0026gt; [g \u0026lt;plug\u0026gt;(lsp-previous-diagnostic) nmap \u0026lt;buffer\u0026gt; ]g \u0026lt;plug\u0026gt;(lsp-next-diagnostic) nmap \u0026lt;buffer\u0026gt; K \u0026lt;plug\u0026gt;(lsp-hover) inoremap \u0026lt;buffer\u0026gt; \u0026lt;expr\u0026gt;\u0026lt;c-f\u0026gt; lsp#scroll(+4) inoremap \u0026lt;buffer\u0026gt; \u0026lt;expr\u0026gt;\u0026lt;c-d\u0026gt; lsp#scroll(-4) nmap \u0026lt;Space\u0026gt;f \u0026lt;plug\u0026gt;(lsp-document-format) let g:lsp_document_highlight_enabled = 1 let g:lsp_diagnostics_enabled = 1 let g:lsp_format_sync_timeout = 1000 autocmd! BufWritePre *.go,*.py call execute(\u0026#39;LspDocumentFormatSync\u0026#39;) \u0026#34; autocmd BufWritePre \u0026lt;buffer\u0026gt; LspDocumentFormatSync \u0026#34; refer to doc to add more commands endfunction augroup lsp_install au! \u0026#34; call s:on_lsp_buffer_enabled only for languages that has the server registered. autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled() augroup END Plug \u0026#39;github/copilot.vim\u0026#39; \u0026#34; :Copilot setup "
},
{
	"uri": "/linux/nginx/",
	"title": "nginx",
	"tags": [],
	"description": "",
	"content": "推荐在线配置 https://digitalocean.github.io/nginxconfig.io/?global.app.lang=zhCN click it https证书 # 安装certbot yay -S --noconfirm certbot sudo certbot certonly --standalone -d domain sudo certbot certonly -d domain --webroot -w /html/filepath/ sudo crontab -e 15 2 * */2 * systemctl stop nginx.service \u0026amp;\u0026amp; certbot renew \u0026amp;\u0026amp; systemctl restart nginx.service 基本配置 server { listen 80; listen [::]:80; server_name blog.hjkl01.cn; # 静态文件 root /html/github; location / { index index.html index.htm; } # django location /static/ { alias /home/ubuntu/djangoapp/static/; } location /media/ { alias /home/ubuntu/djangoapp/media/; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Forwarded-Host $server_name; proxy_set_header X-Real-IP $remote_addr; proxy_redirect off; add_header P3P \u0026#39;CP=\u0026#34;ALL DSP COR PSAa OUR NOR ONL UNI COM NAV\u0026#34;\u0026#39;; add_header Access-Control-Allow-Origin *; } # 转发端口 location / { proxy_pass http://127.0.0.1:8000/; } # 重定向 return 301 https://$host$request_uri; # rewrite ^(.*)$ https://blog.hjkl01.cn; #将所有HTTP请求通过rewrite指令重定向到HTTPS。 } ssl server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name blog.hjkl01.cn; ssl_certificate /etc/letsencrypt/live/blog.hjkl01.cn/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/blog.hjkl01.cn/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/blog.hjkl01.cn/chain.pem; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; # 静态文件 location / { root /html/github; #站点目录。 index index.html index.htm; } # 转发端口 location / { proxy_pass http://127.0.0.1:8080/; } } 转发mongo端口(TCP) stream { server { listen \u0026lt;your incoming Mongo TCP port\u0026gt;; proxy_connect_timeout 1s; proxy_timeout 3s; proxy_pass stream_mongo_backend; } upstream stream_mongo_backend { server \u0026lt;localhost:your local Mongo TCP port\u0026gt;; } } "
},
{
	"uri": "/docker/nocodb/",
	"title": "nocodb",
	"tags": [],
	"description": "",
	"content": "version: \u0026#39;3.3\u0026#39; services: root_db: image: postgres:13-alpine restart: unless-stopped ports: - 5432:5432 command: postgres -c \u0026#39;max_connections=500\u0026#39; environment: POSTGRES_PASSWORD: \u0026#39;passwd\u0026#39; POSTGRES_USER: \u0026#39;username\u0026#39; POSTGRES_DB: \u0026#39;postgres\u0026#39; PGDATA: \u0026#39;/var/lib/postgresql/data\u0026#39; healthcheck: test: pg_isready -U \u0026#34;$$POSTGRES_USER\u0026#34; -d \u0026#34;$$POSTGRES_DB\u0026#34; interval: 10s timeout: 2s retries: 10 volumes: - ./data/nocodb_pg:/var/lib/postgresql/data nocodb: depends_on: root_db: condition: service_healthy image: nocodb/nocodb:latest ports: - \u0026#34;8080:8080\u0026#34; - \u0026#34;8081:8081\u0026#34; - \u0026#34;8082:8082\u0026#34; - \u0026#34;8083:8083\u0026#34; restart: always environment: NC_DB: \u0026#34;pg://root_db:5432?u=username\u0026amp;p=passwd\u0026amp;d=postgres\u0026#34; "
},
{
	"uri": "/linux/yarn_npm/",
	"title": "npm",
	"tags": [],
	"description": "",
	"content": "yarn/npm 设置国内源 # 临时 npm --registry https://registry.npm.taobao.org install express # 写入文件 yarn config set registry \u0026#39;https://registry.npm.taobao.org\u0026#39; yarn config get registry npm config set registry https://registry.npm.taobao.org npm config get registry use yrm npm install -g yrm # yarn global add yrm yrm ls yrm use taobao yrm test "
},
{
	"uri": "/python/ocr/",
	"title": "ocr",
	"tags": [],
	"description": "",
	"content": "https://github.com/breezedeus/cnocr "
},
{
	"uri": "/office/",
	"title": "Office",
	"tags": [],
	"description": "",
	"content": "\n"
},
{
	"uri": "/docker/pgadmin4/",
	"title": "pgadmin4",
	"tags": [],
	"description": "",
	"content": "version: \u0026#39;3.5\u0026#39; services: pgadmin: container_name: pgadmin4_container image: dpage/pgadmin4 restart: always environment: PGADMIN_DEFAULT_EMAIL: xx@xx.com PGADMIN_DEFAULT_PASSWORD: password ports: - \u0026#34;80:80\u0026#34; "
},
{
	"uri": "/python/pip/",
	"title": "pip",
	"tags": [],
	"description": "",
	"content": "# virtualenv (sudo) pip install virtualenv virtualenv -p /usr/bin/python3.7 ~/.virtualenv/py3 # pip freeze \u0026gt; requirements.txt # pipenv alias pv=\u0026#39;pipenv run python\u0026#39; alias pi=\u0026#39;pipenv run pip install \u0026#39; # pip.conf - ### 一次 pip install web.py -i http://pypi.douban.com/simple --trusted-host pypi.douban.com - ### 全局 # 清华源 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple # 阿里源 pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ # 腾讯源 pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple # 豆瓣源 pip config set global.index-url http://pypi.douban.com/simple/ or # linux:`~/.pip/pip.conf` # windows:`%HOMEPATH%\\pip\\pip.ini）` [global] index-url = http://mirrors.aliyun.com/pypi/simple/ [install] trusted-host=mirrors.aliyun.com # locale.Error: unsupported locale setting export LC_ALL=C "
},
{
	"uri": "/docker/postgresql/",
	"title": "postgresql",
	"tags": [],
	"description": "",
	"content": "version: \u0026#39;3\u0026#39; services: db: image: postgres:10-alpine restart: always ports: - 5432:5432 environment: POSTGRES_PASSWORD: \u0026#39;password\u0026#39; POSTGRES_USER: \u0026#39;user\u0026#39; POSTGRES_DB: \u0026#39;postgres\u0026#39; PGDATA: \u0026#39;/var/lib/postgresql/data\u0026#39; volumes: - ./postgres:/var/lib/postgresql/data admin: image: adminer restart: always depends_on: - db ports: - 8080:8080 # 可视化工具推荐 docker run -d -e SESSIONS=true -p 8081:8081 sosedoff/pgweb # mac tableplus # 在linux 中安装 sudo apt-get install postgresql-client sudo apt-get install postgresql # sudo apt-get install pgadmin3 # pgcli sudo adduser dbuser sudo su - postgres # sudo -u postgres psql psql \\password postgres CREATE USER dbuser WITH PASSWORD \u0026#39;password\u0026#39;; CREATE DATABASE exampledb OWNER dbuser; GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser; psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432 psql exampledb # psql exampledb \u0026lt; exampledb.sql #恢复外部数据 pg_dump -U username -h localhost databasename \u0026gt;\u0026gt; sqlfile.sql sudo vi /etc/postgresql/9.5/main/postgresql.conf sudo gedit /etc/postgresql/9.5/main/pg_hba.conf\thost all all 0.0.0.0/0 md5 sudo /etc/init.d/postgresql restart # 查询有外键的数据 select count(*) from \u0026#34;case\u0026#34; where court_id in (select id from court where province =\u0026#39;\u0026#39;); # 导出数据结构 python -m pwiz -e postgresql -u user -P db \u0026gt; model.py python -m pwiz -e mysql -H 192.168.1.x -u root -P dbname \u0026gt; model.py "
},
{
	"uri": "/docker/prest/",
	"title": "prest",
	"tags": [],
	"description": "",
	"content": "# https://github.com/prest/prest#test-using-docker version: \u0026#34;3\u0026#34; services: postgres: image: postgres volumes: - \u0026#34;./data/postgres:/var/lib/postgresql/data\u0026#34; environment: - POSTGRES_USER=prest - POSTGRES_DB=prest - POSTGRES_PASSWORD=prest ports: - \u0026#34;5432:5432\u0026#34; healthcheck: test: [\u0026#34;CMD-SHELL\u0026#34;, \u0026#34;pg_isready\u0026#34;, \u0026#34;-U\u0026#34;, \u0026#34;prest\u0026#34;] interval: 30s retries: 3 prest: # use latest build - analyze the risk of using this version in production image: prest/prest links: - \u0026#34;postgres:postgres\u0026#34; environment: - PREST_DEBUG=false - PREST_AUTH_ENABLED=true - PREST_PG_HOST=postgres - PREST_PG_USER=prest - PREST_PG_PASS=prest - PREST_PG_DATABASE=prest - PREST_PG_PORT=5432 - PREST_SSL_MODE=disable depends_on: postgres: condition: service_healthy ports: - \u0026#34;3000:3000\u0026#34; "
},
{
	"uri": "/linux/proxy/",
	"title": "proxy",
	"tags": [],
	"description": "",
	"content": "trojan-go brew install trojan-go 修改 /usr/local/etc/trojan-go/config.json brew service start trojan-go glider yay -S glider glider -listen :1080 -forward trojan://password@ip:443 # with auth glider -listen user:user_passwd@:61000 -forward trojan://password@ip:443 # or glider.conf listen=:1080 forward=trojan://password@ip:443 trojan https://github.com/trojan-gfw/trojan ### 机场推荐: https://portal.shadowsocks.nz/aff.php?aff=24252 ### 部署 https://github.com/Jrohy/trojan 旧 server: install libsodium pip install shadowsocks pip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U # path : /etc/shadowsocks.json { \u0026#34;server\u0026#34;:\u0026#34;0.0.0.0\u0026#34;, \u0026#34;port_password\u0026#34;: { \u0026#34;8000\u0026#34;: \u0026#34;password\u0026#34; }, \u0026#34;timeout\u0026#34;:300, \u0026#34;method\u0026#34;:\u0026#34;chacha20-ietf-poly1305\u0026#34;, \u0026#34;fast_open\u0026#34;:true, \u0026#34;pid-file\u0026#34;: \u0026#34;/path/ss.pid\u0026#34;, \u0026#34;log-file\u0026#34;: \u0026#34;/path/ss.log\u0026#34; } (sudo) ssserver -c /etc/shadowsocks.json -d start sudo ssserver -d stop https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E 开启bbr wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh sysctl net.ipv4.tcp_available_congestion_control #返回值一般为： #net.ipv4.tcp_available_congestion_control = bbr cubic reno sysctl net.ipv4.tcp_congestion_control #返回值一般为： #net.ipv4.tcp_congestion_control = bbr sysctl net.core.default_qdisc #返回值一般为： #net.core.default_qdisc = fq lsmod | grep bbr #返回值有 tcp_bbr 模块即说明bbr已启动。 client ubuntu下使用， Mac下载 https://github.com/shadowsocks/ShadowsocksX-NG/releases/ pip install shadowsocks path : ~/.shadowsocks/shadowsocks.json { \u0026#34;server\u0026#34;:\u0026#34;my_server_ip\u0026#34;, \u0026#34;server_port\u0026#34;:my_server_port, \u0026#34;password\u0026#34;:\u0026#34;my_password\u0026#34;, \u0026#34;local_address\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;local_port\u0026#34;:1080, \u0026#34;timeout\u0026#34;:300, \u0026#34;method\u0026#34;:\u0026#34;chacha20-ietf-poly1305\u0026#34;, \u0026#34;fast_open\u0026#34;:true, \u0026#34;pid-file\u0026#34;: \u0026#34;/path\u0026#34;, \u0026#34;log-file\u0026#34;: \u0026#34;/path\u0026#34; } sslocal -c ~/.shadowsocks/shadowsocks.json -d start 可先在系统设置里设置全局代理，在浏览器里安装 https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif "
},
{
	"uri": "/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": "# mysql-clients yay -S --noconfirm mysql-clients gcc pip install mysqlclient # json json.dumps(item, ensure_ascii=False, indent=4) # 对字典排序 sorted(_dict.items(), key=lambda d: d[1], reverse=False) # unicode replace repr() # http server py2 python -m SimpleHTTPServer 8000 py3 python -m http.server 8000 # 格式化输出 print(\u0026#34;{:02d}\u0026#34;.format(1)) print(f\u0026#34;{1:02d}\u0026#34;) # datetime pip install python-dateutil # yestoday from datetime import datetime, timedelta # days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0 yestoday = datetime.today() - timedelta(days=1) print(yestoday) from datetime import datetime from dateutil import parser format_time = datetime.now().strftime(\u0026#34;%m/%d/%Y, %H:%M:%S\u0026#34;) t = \u0026#34;Thu, 9 Sep 2021 00:17:59\u0026#34; result = parser.parse(t) print(result) print(type(result)) now = datetime.now() print((now - result).days) \u0026gt;\u0026gt;\u0026gt; import arrow \u0026gt;\u0026gt;\u0026gt; arrow.get(\u0026#39;2013-05-11T21:23:58.970460+07:00\u0026#39;) \u0026lt;Arrow [2013-05-11T21:23:58.970460+07:00]\u0026gt; \u0026gt;\u0026gt;\u0026gt; utc = arrow.utcnow() \u0026gt;\u0026gt;\u0026gt; utc \u0026lt;Arrow [2013-05-11T21:23:58.970460+00:00]\u0026gt; \u0026gt;\u0026gt;\u0026gt; utc = utc.shift(hours=-1) \u0026gt;\u0026gt;\u0026gt; utc \u0026lt;Arrow [2013-05-11T20:23:58.970460+00:00]\u0026gt; \u0026gt;\u0026gt;\u0026gt; local = utc.to(\u0026#39;US/Pacific\u0026#39;) \u0026gt;\u0026gt;\u0026gt; local \u0026lt;Arrow [2013-05-11T13:23:58.970460-07:00]\u0026gt; \u0026gt;\u0026gt;\u0026gt; local.timestamp() 1368303838.970460 \u0026gt;\u0026gt;\u0026gt; local.format() \u0026#39;2013-05-11 13:23:58 -07:00\u0026#39; \u0026gt;\u0026gt;\u0026gt; local.format(\u0026#39;YYYY-MM-DD HH:mm:ss ZZ\u0026#39;) \u0026#39;2013-05-11 13:23:58 -07:00\u0026#39; \u0026gt;\u0026gt;\u0026gt; local.humanize() \u0026#39;an hour ago\u0026#39; \u0026gt;\u0026gt;\u0026gt; local.humanize(locale=\u0026#39;ko-kr\u0026#39;) \u0026#39;한시간 전\u0026#39; # read big file with open(\u0026#34;log.txt\u0026#34;) as infile: for line in infile: do_something_with(line) # csv import csv # read result = [] input_file = csv.DictReader(open(\u0026#34;result.csv\u0026#34;)) for row in input_file: result.append(row) print(result) # write dict my_dict = {\u0026#34;test\u0026#34;: 1, \u0026#34;testing\u0026#34;: 2} with open(\u0026#39;mycsvfile.csv\u0026#39;, \u0026#39;w\u0026#39;, encoding=\u0026#34;utf-8-sig\u0026#34;) as f: # You will need \u0026#39;wb\u0026#39; mode in Python 2.x w = csv.DictWriter(f, my_dict.keys()) w.writeheader() w.writerow(my_dict) # write list result = [{\u0026#34;test\u0026#34;: 1, \u0026#34;testing\u0026#34;: 2}, {\u0026#34;test\u0026#34;: 1, \u0026#34;testing\u0026#34;: 2}] with open(\u0026#39;mycsvfile.csv\u0026#39;, \u0026#39;w\u0026#39;, encoding=\u0026#34;utf-8-sig\u0026#34;) as f: # You will need \u0026#39;wb\u0026#39; mode in Python 2.x w = csv.DictWriter(f, result[0].keys()) w.writeheader() w.writerows(result) # asyncio import asyncio import time def now(): return time.time() async def do_some_work(x): print(\u0026#39;Waiting: \u0026#39;, x) await asyncio.sleep(x) return \u0026#39;Done after {}s\u0026#39;.format(x) start = now() coroutine1 = do_some_work(1) coroutine2 = do_some_work(2) coroutine3 = do_some_work(4) tasks = [ asyncio.ensure_future(coroutine1), asyncio.ensure_future(coroutine2), asyncio.ensure_future(coroutine3) ] loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait(tasks)) for task in tasks: print(\u0026#39;Task ret: \u0026#39;, task.result()) print(\u0026#39;TIME: \u0026#39;, now() - start) # yield def create_generator(_range): for i in range(_range): yield i result = create_generator(5) for i in result: print(i) # xmljson import xmljson from lxml.etree import fromstring,tostring json.loads(json.dumps(xmljson.badgerfish.data(fromstring(con.encode())))) # 乘法表 print (\u0026#39;\\n\u0026#39;.join([\u0026#39; \u0026#39;.join([\u0026#39;%s*%s=%-2s\u0026#39; % (y,x,x*y) for y in range(1,x+1)]) for x in range(1,10)])) "
},
{
	"uri": "/python/fastapi_mail/",
	"title": "python send mail",
	"tags": [],
	"description": "",
	"content": "fastapi send mail API import uvicorn from fastapi import FastAPI, BackgroundTasks, UploadFile, File, Form from starlette.responses import JSONResponse from fastapi_mail import FastMail, MessageSchema, ConnectionConfig from pydantic import BaseModel, EmailStr from typing import List, Text class EmailSchema(BaseModel): email: List[EmailStr] html: Text conf = ConnectionConfig( # update username, password, from # example qq mail # https://service.mail.qq.com/cgi-bin/help?subtype=1\u0026amp;\u0026amp;id=28\u0026amp;\u0026amp;no=1001256 MAIL_USERNAME=\u0026#34;qq123456\u0026#34;, MAIL_PASSWORD=\u0026#34;password\u0026#34;, MAIL_FROM=\u0026#34;qq123456@qq.com\u0026#34;, MAIL_PORT=587, MAIL_SERVER=\u0026#34;smtp.qq.com\u0026#34;, MAIL_TLS=True, MAIL_SSL=False, USE_CREDENTIALS=True, VALIDATE_CERTS=True, ) app = FastAPI() html = \u0026#34;\u0026#34;\u0026#34; \u0026lt;p\u0026gt;Thanks for using Fastapi-mail\u0026lt;/p\u0026gt; \u0026#34;\u0026#34;\u0026#34; @app.post(\u0026#34;/email\u0026#34;) async def simple_send(email: EmailSchema) -\u0026gt; JSONResponse: message = MessageSchema( subject=\u0026#34;Fastapi-Mail module\u0026#34;, recipients=email.dict().get( \u0026#34;email\u0026#34; ), # List of recipients, as many as you can pass body=email.dict().get(\u0026#34;html\u0026#34;, html), subtype=\u0026#34;html\u0026#34;, ) fm = FastMail(conf) await fm.send_message(message) return JSONResponse(status_code=200, content={\u0026#34;message\u0026#34;: \u0026#34;email has been sent\u0026#34;}) @app.post(\u0026#34;/file\u0026#34;) async def send_file( background_tasks: BackgroundTasks, file: UploadFile = File(...), email: EmailStr = Form(...), ) -\u0026gt; JSONResponse: message = MessageSchema( subject=\u0026#34;Fastapi mail module\u0026#34;, recipients=[email], body=\u0026#34;Simple background task \u0026#34;, attachments=[file], ) fm = FastMail(conf) background_tasks.add_task(fm.send_message, message) return JSONResponse(status_code=200, content={\u0026#34;message\u0026#34;: \u0026#34;email has been sent\u0026#34;}) if __name__ == \u0026#39;__main__\u0026#39;: uvicorn.run(\u0026#39;main:app\u0026#39;, reload=True, host=\u0026#39;127.0.0.1\u0026#39;, port=8000) # https://sabuhish.github.io/fastapi-mail/example/ yagmail import yagmail username = \u0026#34;xxx@qq.com\u0026#34; password = \u0026#34;xxx\u0026#34; host = \u0026#34;smtp.qq.com\u0026#34; mail = yagmail.SMTP(user=username, password=password, host=host) mail.send(to=username, subject=\u0026#34;这是主题\u0026#34;, contents=[\u0026#34;这是内容\u0026#34;, r\u0026#34;./logs/1695814_1.png\u0026#34;]) print(\u0026#34;finish !\u0026#34;) "
},
{
	"uri": "/docker/redis/",
	"title": "redis",
	"tags": [],
	"description": "",
	"content": "# redis 及其持久化 # redis.conf requirepass 123456 appendonly yes daemonize no version: \u0026#39;3\u0026#39; services: redis: image: redis restart: unless-stopped # command: redis-server --requirepass 123456 command: redis-server /usr/local/etc/redis/redis.conf ports: - 6379:6379 volumes: - ./redis.conf:/usr/local/etc/redis/redis.conf - ./data/redis:/data/ "
},
{
	"uri": "/linux/todesk/",
	"title": "remote desktop",
	"tags": [],
	"description": "",
	"content": "arch install todesk wget https://dl.todesk.com/linux/todesk_2.0.2_x86_64.pkg.tar.zst sudo pacman -U todesk_2.0.2_x86_64.pkg.tar.zst sudo systemctl restart todeskd.service 详情参考: https://www.todesk.com/download_detail.html\n"
},
{
	"uri": "/linux/samba/",
	"title": "samba",
	"tags": [],
	"description": "",
	"content": "在arch 中安装参考 https://wiki.archlinux.org/title/samba 在ubuntu中安装 sudo apt-get install samba sudo useradd xxx sudo smbpasswd -a xxx sudo vi /etc/samba/smb.conf #### 配置内加入以下内容 [dev] comment = dev path = /var/dev valid user = xxx write list = xxx create mask = 0664 directory mask = 0775 force user = xxx force group = xxx public = no available = yes browseable = yes security = user ### 重启samba【sudo service smbd restart】 "
},
{
	"uri": "/docker/samba/",
	"title": "samba &amp;&amp; nfs",
	"tags": [],
	"description": "",
	"content": "samba version: \u0026#39;3.4\u0026#39; services: samba: image: dperson/samba environment: TZ: \u0026#39;EST5EDT\u0026#39; networks: - default ports: - \u0026#34;137:137/udp\u0026#34; - \u0026#34;138:138/udp\u0026#34; - \u0026#34;139:139/tcp\u0026#34; - \u0026#34;445:445/tcp\u0026#34; read_only: true tmpfs: - /tmp restart: unless-stopped stdin_open: true tty: true volumes: - /data:/mnt:z command: \u0026#39;-s \u0026#34;Volume;/mnt;yes;no;no;USER\u0026#34; -u \u0026#34;USER;PASSWORD\u0026#34; -p\u0026#39; nfs version: \u0026#34;2.1\u0026#34; services: # https://hub.docker.com/r/itsthenetwork/nfs-server-alpine nfs: image: itsthenetwork/nfs-server-alpine:12 container_name: nfs restart: unless-stopped privileged: true environment: - SHARED_DIRECTORY=/data volumes: - ./data/jellyfin/movies:/data ports: - 2049:2049 "
},
{
	"uri": "/python/settings/",
	"title": "settings.py",
	"tags": [],
	"description": "",
	"content": "# pip install python-dotenv pyyaml loguru import os import sys import toml import yaml from loguru import logger from dotenv import load_dotenv BASE_DIR = os.path.abspath(os.path.dirname(__file__)).rstrip(\u0026#34;/common\u0026#34;) log_file_path = os.path.join(BASE_DIR, \u0026#34;logs/stdout.log\u0026#34;) err_log_file_path = os.path.join(BASE_DIR, \u0026#34;logs/error.log\u0026#34;) logger.add( log_file_path, format=\u0026#34;{process} {thread} {time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}\u0026#34;, rotation=\u0026#34;100 MB\u0026#34;, colorize=True, enqueue=True, backtrace=True, diagnose=True, level=\u0026#34;INFO\u0026#34;, ) logger.add( err_log_file_path, format=\u0026#34;{time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}\u0026#34;, rotation=\u0026#34;100 MB\u0026#34;, level=\u0026#34;ERROR\u0026#34;, colorize=True, enqueue=True, backtrace=True, diagnose=True, ) class SettingsMeta: def __init__(self, _file=None): self.file = _file # read config.yaml def read_yaml(self, key, file=\u0026#34;settings.yaml\u0026#34;): if os.path.exists(file): with open(file, \u0026#34;r\u0026#34;) as f: con = yaml.safe_load(f) if con: # logger.debug(con) return con.get(key) # read .secrets.toml def read_toml(self, key, file=\u0026#34;.secrets.toml\u0026#34;): if os.path.exists(file): con = toml.load(file) if con: # logger.debug(con) return con.get(key) # read .env def read_env(self, key): load_dotenv() return os.getenv(key) def __getattr__(self, key): result = None file_function = { \u0026#34;yaml\u0026#34;: self.read_yaml, \u0026#34;toml\u0026#34;: self.read_toml, \u0026#34;env\u0026#34;: self.read_env, } if self.file: file_type = self.file.split(\u0026#34;.\u0026#34;) func = file_function.get(file_type[-1]) if func: return func(key) else: return functions = [self.read_yaml, self.read_toml, self.read_env] for ft in functions: result = ft(key) if result: return result return result settings = SettingsMeta() # settings.py # pip install dynaconf loguru import os from loguru import logger from dynaconf import Dynaconf BASE_DIR = os.path.abspath(os.path.dirname(__file__)).rstrip(\u0026#34;/common\u0026#34;) log_file_path = os.path.join(BASE_DIR, \u0026#34;logs/stdout.log\u0026#34;) err_log_file_path = os.path.join(BASE_DIR, \u0026#34;logs/error.log\u0026#34;) logger.add( log_file_path, format=\u0026#34;{process} {thread} {time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}\u0026#34;, rotation=\u0026#34;100 MB\u0026#34;, colorize=True, enqueue=True, backtrace=True, diagnose=True, level=\u0026#34;INFO\u0026#34;, ) logger.add( err_log_file_path, format=\u0026#34;{time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}\u0026#34;, rotation=\u0026#34;100 MB\u0026#34;, level=\u0026#34;ERROR\u0026#34;, colorize=True, enqueue=True, backtrace=True, diagnose=True, ) Config = Dynaconf(settings_files=[\u0026#34;.secrets.toml\u0026#34;]) print(Config.__dict__) print(Config.redis_ip) "
},
{
	"uri": "/docker/shiori/",
	"title": "shiori 书签管理器",
	"tags": [],
	"description": "",
	"content": "# 原链接 https://github.com/go-shiori/shiori/ # loginuser: shiori # passwd: gopher version: \u0026#34;2.1\u0026#34; services: shiori: image: nicholaswilde/shiori:latest container_name: shiori-default environment: TZ: Asia/Shanghai PUID: 1000 PGID: 1000 SHIORI_PG_HOST: db SHIORI_PG_PORT: 5432 SHIORI_PG_USER: user SHIORI_PG_PASS: password SHIORI_PG_NAME: \u0026#34;\u0026#34; ports: - 8080:8080 restart: unless-stopped volumes: - ./data/shiori:/data depends_on: - db db: image: postgres restart: always environment: POSTGRES_USER: user POSTGRES_PASSWORD: password volumes: - ./data/shiori_postgres:/var/lib/postgresql/data "
},
{
	"uri": "/linux/privoxy/",
	"title": "socks5 转 http 之 privoxy",
	"tags": [],
	"description": "",
	"content": "socks5 转 http privoxy 配置 yay -S privoxy cd /etc/privoxy (sudo) mv config config.bak (sudo) vi config forward-socks5t / 127.0.0.1:1080 . listen-address 127.0.0.1:9888 sudo systemctl restart privoxy.service sudo systemctl enable privoxy.service "
},
{
	"uri": "/python/spider/",
	"title": "spider-selenium",
	"tags": [],
	"description": "",
	"content": "import random from selenium import webdriver from time import sleep from bs4 import BeautifulSoup as BS options = webdriver.ChromeOptions() UA = \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36\u0026#39; options.add_argument(f\u0026#39;user-agent={UA}\u0026#39;) options.add_experimental_option(\u0026#34;excludeSwitches\u0026#34;, [\u0026#34;enable-automation\u0026#34;]) options.add_experimental_option(\u0026#39;useAutomationExtension\u0026#39;, False) # 没有配置环境变量的话需要填写Chromedriver的路径：webdriver.Chrome(executable_path=\u0026#34;***\u0026#34;) driver = webdriver.Chrome(options=options) driver.maximize_window() # 去掉window.navigator.webdriver字段，防止被检测出是使用selenium driver.execute_cdp_cmd(\u0026#34;Page.addScriptToEvaluateOnNewDocument\u0026#34;, { \u0026#34;source\u0026#34;: \u0026#34;\u0026#34;\u0026#34; Object.defineProperty(navigator, \u0026#39;webdriver\u0026#39;, { get: () =\u0026gt; undefined }) \u0026#34;\u0026#34;\u0026#34; }) "
},
{
	"uri": "/linux/starcharts/",
	"title": "starchart",
	"tags": [],
	"description": "",
	"content": "星图 在markdown中的代码: ![stars](https://starchart.cc/lesssound/pornhub.svg) example: "
},
{
	"uri": "/linux/supervisor/",
	"title": "supervisor ",
	"tags": [],
	"description": "",
	"content": "后缀为conf或ini [program:frp_ssh] command = /home/user/frp/frpc -c /home/user/frp/config.ini directory = /home/user/somedir user = user autostart = true autorestart = true startsecs = 3 redirect_stderr = true stdout_logfile_maxbytes = 50MB stdout_logfile_backups = 10 stdout_logfile = /home/user/frp/log "
},
{
	"uri": "/linux/switchyomega/",
	"title": "SwitchyOmega",
	"tags": [],
	"description": "",
	"content": "config SwitchyOmega 访问变慢\n关闭chrome的安全dns\nPrivacy and Security -\u0026gt; Security -\u0026gt; Use Secure DNS\n参考: https://github.com/FelisCatus/SwitchyOmega/issues/1742#issuecomment-826272936\n"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/linux/ubuntu/",
	"title": "ubuntu",
	"tags": [],
	"description": "",
	"content": "中文乱码 sudo apt-get -y install language-pack-zh-hans #写入 ~/.zshrc: LC_ALL=zh_CN.utf8 export LC_ALL source ~/.zshrc 配置静态IP path: `/etc/network/interface` auto eth1 iface eth1 inet static address 192.168.56.xx netmask 255.255.255.0 network 192.168.56.0 broadcast 192.168.56.255 if possible, 配置路由器中的dhcp. ip route sudo route add -net 66.1.254.0/24 gw 66.16.62.254 enp4s0 sudo ip addr flush dev enp4s0 安装Ubuntu 分区 efi swap\t交换空间 / ext4 /boot\t200M左右\text4\t/tmp\t5G左右\text4\t手动配置swap内存 sudo fallocate -l 4G /swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile sudo vim /etc/fstab /swapfile none swap sw 0 0 "
},
{
	"uri": "/linux/vnc/",
	"title": "vnc",
	"tags": [],
	"description": "",
	"content": "服务端安装 # ubuntu sudo apt-get install x11vnc x11vnc -storepasswd x11vnc -auth guess -once -loop -noxdamage -repeat -rfbauth ~/.vnc/passwd -rfbport 5900 -shared x11vnc -forever https://www.realvnc.com/en/connect/download/viewer/ # arch yay -S x11vnc net-tools update -\u0026gt; /etc/gdm/custom.conf: WaylandEnable=false x11vnc -wait 50 -noxdamage -passwd PASSWORD -display :0 -forever -o /var/log/x11vnc.log -bg 客户端 https://www.realvnc.com/\n# 错误 # display_server_not_supported # /etc/gdm3/custom.conf [daemon] # Enabling automatic login AutomaticLoginEnable=true AutomaticLogin=$USERNAME sudo systemctl restart gdm.service "
},
{
	"uri": "/",
	"title": "我的笔记",
	"tags": [],
	"description": "",
	"content": " Category Address github.io address Github https://github.com/hjkl01/ https://github.com/hjkl01/ Linux link https://hjkl01.github.io/docker/ docker link https://hjkl01.github.io/linux/ python link https://hjkl01.github.io/python/ mac link https://hjkl01.github.io/mac/ "
}]