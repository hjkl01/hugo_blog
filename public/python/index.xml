<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on My Note Site</title>
    <link>https://hjkl01.github.io/python/</link>
    <description>Recent content in Python on My Note Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language><atom:link href="https://hjkl01.github.io/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>celery</title>
      <link>https://hjkl01.github.io/python/celery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/celery/</guid>
      <description>celery 用法 # test.py import time from datetime import datetime from celery import Celery # result_address = &amp;#39;elasticsearch://user:passwd@ip:port/index&amp;#39; broker = &amp;#39;redis://:passwd@ip:port/db&amp;#39; result_address = &amp;#34;mongodb://user:password@ip:port/db&amp;#34; app = Celery(&amp;#34;tasks&amp;#34;, broker=broker, backend=result_address) def my_on_failure(exc, task_id, args, kwargs, einfo): print(&amp;#34;task failed&amp;#34;) for argv in [exc, task_id, args, kwargs, einfo]: print(argv) app.conf.update( task_serializer=&amp;#34;json&amp;#34;, accept_content=[&amp;#34;json&amp;#34;], # Ignore other content result_serializer=&amp;#34;json&amp;#34;, timezone=&amp;#34;Asia/Shanghai&amp;#34;, enable_utc=True, # 下面这个就是限制tasks模块下的add函数，每秒钟只能执行10次 # CELERY_ANNOTATIONS = {&amp;#39;tasks.add&amp;#39;:{&amp;#39;rate_limit&amp;#39;:&amp;#39;10/s&amp;#39;}} # 或者限制所有的任务的刷新频率 task_annotations={&amp;#34;tasks.add&amp;#34;: {&amp;#34;rate_limit&amp;#34;: &amp;#34;2/m&amp;#34;}}, # annotations={&amp;#34;tasks.add&amp;#34;: {&amp;#34;rate_limit&amp;#34;: &amp;#34;5/m&amp;#34;, &amp;#34;on_failure&amp;#34;: my_on_failure}}, # annotations={&amp;#34;*&amp;#34;: {&amp;#34;rate_limit&amp;#34;: &amp;#34;10/s&amp;#34;, &amp;#34;on_failure&amp;#34;: my_on_failure}}, # celery worker的并发数，默认是服务器的内核数目,也是命令行-c参数指定的数目 worker_concurrency=10, # celery worker 每次去BROKER中预取任务的数量 prefetch_multiplier=1, # 单个任务的运行时间限制，否则会被杀死 task_time_limit=60, # 压缩方案选择，可以是zlib, bzip2，默认是发送没有压缩的数据 message_compression=&amp;#34;zlib&amp;#34;, ) @app.</description>
    </item>
    
    <item>
      <title>database</title>
      <link>https://hjkl01.github.io/python/databases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/databases/</guid>
      <description>sqlalchemy # pip install psycopg2-binary # sqlacodegen postgres://user:passwd@host:ip/database --outfile model.py from sqlalchemy import create_engine from sqlalchemy import Column, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker db_string = &amp;#34;postgres://admin:donotusethispassword@aws-us-east-1-portal.19.dblayer.com:15813/compose&amp;#34; db = create_engine(db_string) base = declarative_base() class Film(base): __tablename__ = &amp;#34;films&amp;#34; title = Column(String, primary_key=True) director = Column(String) year = Column(String) Session = sessionmaker(db) session = Session() base.metadata.create_all(db) # Create doctor_strange = Film(title=&amp;#34;Doctor Strange&amp;#34;, director=&amp;#34;Scott Derrickson&amp;#34;, year=&amp;#34;2016&amp;#34;) session.add(doctor_strange) session.commit() # Read films = session.</description>
    </item>
    
    <item>
      <title>django</title>
      <link>https://hjkl01.github.io/python/django/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/django/</guid>
      <description>import os import django from proxyip.models import ProxyIP os.environ[&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;] = &amp;#39;dj_project.settings&amp;#39; django.setup() p = ProxyIP(ip=&amp;#39;192.168.50.1&amp;#39;) p.save() print(ProxyIP.objects.all()) python manage.py shell &amp;lt; main.py python manage.py dumpdata (myapp) &amp;gt; myapp.json python manage.py loaddata myapp.json </description>
    </item>
    
    <item>
      <title>fastapi</title>
      <link>https://hjkl01.github.io/python/fastapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/fastapi/</guid>
      <description>from fastapi import FastAPI from pydantic import BaseModel app = FastAPI() # @app.get(&amp;#34;/&amp;#34;) async def read_root(): return {&amp;#34;Hello&amp;#34;: &amp;#34;World&amp;#34;} # @app.get(&amp;#34;/items/{item_id}&amp;#34;) async def read_item(item_id: int, q: str = None): return {&amp;#34;item_id&amp;#34;: item_id, &amp;#34;q&amp;#34;: q} class Item(BaseModel): name: str description: str = None price: float tax: float = None # @app.post(&amp;#34;/items/&amp;#34;) async def create_item(item: Item): return item app.add_api_route(&amp;#34;/&amp;#34;, read_root) app.add_api_route(&amp;#34;/item/{item_id}&amp;#34;, read_item) app.add_api_route(&amp;#34;/items/&amp;#34;, create_item, methods=[&amp;#39;POST&amp;#39;]) if __name__ == &amp;#39;__main__&amp;#39;: uvicorn.run(&amp;#39;main:app&amp;#39;, reload=True) # gunicorn test:app -w 4 -k uvicorn.</description>
    </item>
    
    <item>
      <title>jupyter</title>
      <link>https://hjkl01.github.io/python/jupyter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/jupyter/</guid>
      <description># jupyter config pip install jupyter jupyter notebook --generate-config # ipython from notebook.auth import passwd passwd() # or jupyter notebook password vim ~/.jupyter/jupyter_notebook_config.py c.NotebookApp.ip=&amp;#39;*&amp;#39; c.NotebookApp.password = u&amp;#39;&amp;#39; c.NotebookApp.open_browser = False c.NotebookApp.port = 8000 jupyter notebook import os import re import secrets import yaml from rich import print class ConfigMeta: def __init__(self, _file=&amp;#34;config.yaml&amp;#34;): self.file = _file def __getattr__(self, key): with open(self.file, &amp;#34;r&amp;#34;) as file: self.con = yaml.safe_load(file) result = self.con.get(key) return result Config = ConfigMeta() def generate_password(): result = [] for i in range(1, 9): temp = {} temp[&amp;#34;port&amp;#34;] = 9120 + i temp[&amp;#34;dirname&amp;#34;] = f&amp;#34;njrd_venv_{9120+i}&amp;#34; temp[&amp;#34;password&amp;#34;] = secrets.</description>
    </item>
    
    <item>
      <title>mitmproxy</title>
      <link>https://hjkl01.github.io/python/mitmproxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/mitmproxy/</guid>
      <description># install pip install mitmproxy # open mitm.it after set proxy mitmproxy --http2 --listen-host 0.0.0.0 --listen-port 8888 -s mitm_test.py # http.HTTPFlow 实例 flow flow.request.headers #获取所有头信息，包含Host、User-Agent、Content-type等字段 flow.request.url #完整的请求地址，包含域名及请求参数，但是不包含放在body里面的请求参数 flow.request.pretty_url #同flow.request.url目前没看出什么差别 flow.request.host #域名 flow.request.method #请求方式。POST、GET等 flow.request.scheme #什么请求 ，如https flow.request.path # 请求的路径，url除域名之外的内容 flow.request.get_text() #请求中body内容，有一些http会把请求参数放在body里面，那么可通过此方法获取，返回字典类型 flow.request.query #返回MultiDictView类型的数据，url直接带的键值参数 flow.request.get_content()#bytes,结果如flow.request.get_text() flow.request.raw_content #bytes,结果如flow.request.get_content() flow.request.urlencoded_form #MultiDictView，content-type：application/x-www-form-urlencoded时的请求参数，不包含url直接带的键值参数 flow.request.multipart_form #MultiDictView，content-type：multipart/form-data 时的请求参数，不包含url直接带的键值参数 以上均为获取request信息的一些常用方法，对于response，同理 flow.response.status_code #状态码 flow.response.text#返回内容，已解码 flow.response.content #返回内容，二进制 flow.response.setText()#修改返回内容，不需要转码 # example def response(flow): if &amp;#34;some url&amp;#34; in flow.request.url: print(&amp;#34;[*] Request: {}&amp;#34;.format(flow.request.url)) print(&amp;#34;[*] Response: {}&amp;#34;.</description>
    </item>
    
    <item>
      <title>mongo</title>
      <link>https://hjkl01.github.io/python/mongo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/mongo/</guid>
      <description># MongoDB 语法 db.users.find({ create_at: { $exists: true } }) db.users.find() select * from users db.users.find({&amp;#34;age&amp;#34; : 27}) select * from users where age = 27 db.users.find({&amp;#34;username&amp;#34; : &amp;#34;joe&amp;#34;, &amp;#34;age&amp;#34; : 27}) select * from users where &amp;#34;username&amp;#34; = &amp;#34;joe&amp;#34; and age = 27 db.users.find({}, {&amp;#34;username&amp;#34; : 1, &amp;#34;email&amp;#34; : 1}) select username, email from users db.users.find({}, {&amp;#34;username&amp;#34; : 1, &amp;#34;_id&amp;#34; : 0}) // no case // 即时加上了列筛选，_id也会返回；必须显式的阻止_id返回 db.users.find({&amp;#34;age&amp;#34; : {&amp;#34;$gte&amp;#34; : 18, &amp;#34;$lte&amp;#34; : 30}}) select * from users where age &amp;gt;=18 and age &amp;lt;= 30 // $lt(&amp;lt;) $lte(&amp;lt;=) $gt(&amp;gt;) $gte(&amp;gt;=) db.</description>
    </item>
    
    <item>
      <title>multiprocessing</title>
      <link>https://hjkl01.github.io/python/multiprocessing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/multiprocessing/</guid>
      <description>import multiprocessing def f(msg): print(msg) return multiprocessing.current_process().name + &amp;#39;-&amp;#39; + msg def func1(): pool = multiprocessing.Pool(processes=multiprocessing.cpu_count()) results = [] for i in range(10): msg = &amp;#34;hello %d&amp;#34; % (i) results.append(pool.apply_async(f, (msg, ))) pool.close() pool.join() print(&amp;#34;Sub-process(es) done.&amp;#34;) for res in results: print(res.get()) def func2(): from multiprocessing import Pool # with Pool(5) as p: with Pool(processes=multiprocessing.cpu_count()) as p: print(p.map(f, [str(i) for i in range(9)])) if __name__ == &amp;#34;__main__&amp;#34;: # func1() func2() </description>
    </item>
    
    <item>
      <title>ocr</title>
      <link>https://hjkl01.github.io/python/ocr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/ocr/</guid>
      <description>https://github.com/breezedeus/cnocr </description>
    </item>
    
    <item>
      <title>pip</title>
      <link>https://hjkl01.github.io/python/pip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/pip/</guid>
      <description># virtualenv (sudo) pip install virtualenv virtualenv -p /usr/bin/python3.7 ~/.virtualenv/py3 # pip freeze &amp;gt; requirements.txt # pipenv alias pv=&amp;#39;pipenv run python&amp;#39; alias pi=&amp;#39;pipenv run pip install &amp;#39; # pip.conf - ### 一次 pip install web.py -i http://pypi.douban.com/simple --trusted-host pypi.douban.com - ### 全局 # 清华源 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple # 阿里源 pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ # 腾讯源 pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple # 豆瓣源 pip config set global.index-url http://pypi.douban.com/simple/ or # linux:`~/.</description>
    </item>
    
    <item>
      <title>python send mail</title>
      <link>https://hjkl01.github.io/python/fastapi_mail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/fastapi_mail/</guid>
      <description>fastapi send mail API import uvicorn from fastapi import FastAPI, BackgroundTasks, UploadFile, File, Form from starlette.responses import JSONResponse from fastapi_mail import FastMail, MessageSchema, ConnectionConfig from pydantic import BaseModel, EmailStr from typing import List, Text class EmailSchema(BaseModel): email: List[EmailStr] html: Text conf = ConnectionConfig( # update username, password, from # example qq mail # https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;amp;&amp;amp;id=28&amp;amp;&amp;amp;no=1001256 MAIL_USERNAME=&amp;#34;qq123456&amp;#34;, MAIL_PASSWORD=&amp;#34;password&amp;#34;, MAIL_FROM=&amp;#34;qq123456@qq.com&amp;#34;, MAIL_PORT=587, MAIL_SERVER=&amp;#34;smtp.qq.com&amp;#34;, MAIL_TLS=True, MAIL_SSL=False, USE_CREDENTIALS=True, VALIDATE_CERTS=True, ) app = FastAPI() html = &amp;#34;&amp;#34;&amp;#34; &amp;lt;p&amp;gt;Thanks for using Fastapi-mail&amp;lt;/p&amp;gt; &amp;#34;&amp;#34;&amp;#34; @app.</description>
    </item>
    
    <item>
      <title>settings.py</title>
      <link>https://hjkl01.github.io/python/settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/settings/</guid>
      <description># pip install python-dotenv pyyaml loguru import os import sys import toml import yaml from loguru import logger from dotenv import load_dotenv BASE_DIR = os.path.abspath(os.path.dirname(__file__)).rstrip(&amp;#34;/common&amp;#34;) log_file_path = os.path.join(BASE_DIR, &amp;#34;logs/stdout.log&amp;#34;) err_log_file_path = os.path.join(BASE_DIR, &amp;#34;logs/error.log&amp;#34;) logger.add( log_file_path, format=&amp;#34;{process} {thread} {time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}&amp;#34;, rotation=&amp;#34;100 MB&amp;#34;, colorize=True, enqueue=True, backtrace=True, diagnose=True, level=&amp;#34;INFO&amp;#34;, ) logger.add( err_log_file_path, format=&amp;#34;{time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}&amp;#34;, rotation=&amp;#34;100 MB&amp;#34;, level=&amp;#34;ERROR&amp;#34;, colorize=True, enqueue=True, backtrace=True, diagnose=True, ) class SettingsMeta: def __init__(self, _file=None): self.file = _file # read config.</description>
    </item>
    
    <item>
      <title>spider-selenium</title>
      <link>https://hjkl01.github.io/python/spider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hjkl01.github.io/python/spider/</guid>
      <description>import random from selenium import webdriver from time import sleep from bs4 import BeautifulSoup as BS options = webdriver.ChromeOptions() UA = &amp;#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&amp;#39; options.add_argument(f&amp;#39;user-agent={UA}&amp;#39;) options.add_experimental_option(&amp;#34;excludeSwitches&amp;#34;, [&amp;#34;enable-automation&amp;#34;]) options.add_experimental_option(&amp;#39;useAutomationExtension&amp;#39;, False) # 没有配置环境变量的话需要填写Chromedriver的路径：webdriver.Chrome(executable_path=&amp;#34;***&amp;#34;) driver = webdriver.Chrome(options=options) driver.maximize_window() # 去掉window.navigator.webdriver字段，防止被检测出是使用selenium driver.execute_cdp_cmd(&amp;#34;Page.addScriptToEvaluateOnNewDocument&amp;#34;, { &amp;#34;source&amp;#34;: &amp;#34;&amp;#34;&amp;#34; Object.defineProperty(navigator, &amp;#39;webdriver&amp;#39;, { get: () =&amp;gt; undefined }) &amp;#34;&amp;#34;&amp;#34; }) </description>
    </item>
    
  </channel>
</rss>
